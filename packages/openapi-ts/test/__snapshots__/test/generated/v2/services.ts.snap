import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';

import type {
    ModelWithString,
    ModelThatExtends,
    ModelThatExtendsExtends,
    NonAsciiStringæøåÆØÅöôêÊ字符串,
} from './models';

export type DescriptionsData = {
    CallWithDescriptions: {
        /**
         * Testing backticks in string: `backticks` and ```multiple backticks``` should work
         */
        parameterWithBackticks?: string;
        /**
         * Testing multiline comments in string: First line
         * Second line
         *
         * Fourth line
         */
        parameterWithBreaks?: string;
        /**
         * Testing expression placeholders in string: ${expression} should work
         */
        parameterWithExpressionPlaceholders?: string;
        /**
         * Testing quotes in string: 'single quote''' and "double quotes""" should work
         */
        parameterWithQuotes?: string;
        /**
         * Testing reserved characters in string: * inline * and ** inline ** should work
         */
        parameterWithReservedCharacters?: string;
        /**
         * Testing slashes in string: \backwards\\\ and /forwards/// should work
         */
        parameterWithSlashes?: string;
    };
};

export type ParametersData = {
    CallWithParameters: {
        /**
         * This is the parameter that is sent as request body
         */
        parameterBody: string;
        /**
         * This is the parameter that goes into the form data
         */
        parameterForm: string;
        /**
         * This is the parameter that goes into the header
         */
        parameterHeader: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath: string;
        /**
         * This is the parameter that goes into the query params
         */
        parameterQuery: string;
    };
    CallWithWeirdParameterNames: {
        /**
         * This is the parameter with a reserved keyword
         */
        _default?: string;
        /**
         * This is the parameter that is sent as request body
         */
        parameterBody: string;
        /**
         * This is the parameter that goes into the request form data
         */
        parameterForm: string;
        /**
         * This is the parameter that goes into the request header
         */
        parameterHeader: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath1?: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath2?: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath3?: string;
        /**
         * This is the parameter that goes into the request query params
         */
        parameterQuery: string;
    };
};

export type DefaultsData = {
    CallWithDefaultParameters: {
        /**
         * This is a simple boolean with default value
         */
        parameterBoolean: boolean;
        /**
         * This is a simple enum with default value
         */
        parameterEnum: 'Success' | 'Warning' | 'Error';
        /**
         * This is a simple model with default value
         */
        parameterModel: ModelWithString;
        /**
         * This is a simple number with default value
         */
        parameterNumber: number;
        /**
         * This is a simple string with default value
         */
        parameterString: string;
    };
    CallWithDefaultOptionalParameters: {
        /**
         * This is a simple boolean that is optional with default value
         */
        parameterBoolean?: boolean;
        /**
         * This is a simple enum that is optional with default value
         */
        parameterEnum?: 'Success' | 'Warning' | 'Error';
        /**
         * This is a simple model that is optional with default value
         */
        parameterModel?: ModelWithString;
        /**
         * This is a simple number that is optional with default value
         */
        parameterNumber?: number;
        /**
         * This is a simple string that is optional with default value
         */
        parameterString?: string;
    };
    CallToTestOrderOfParams: {
        /**
         * This is a optional string with default
         */
        parameterOptionalStringWithDefault?: string;
        /**
         * This is a optional string with empty default
         */
        parameterOptionalStringWithEmptyDefault?: string;
        /**
         * This is a optional string with no default
         */
        parameterOptionalStringWithNoDefault?: string;
        /**
         * This is a string that can be null with default
         */
        parameterStringNullableWithDefault?: string | null;
        /**
         * This is a string that can be null with no default
         */
        parameterStringNullableWithNoDefault?: string | null;
        /**
         * This is a string with default
         */
        parameterStringWithDefault: string;
        /**
         * This is a string with empty default
         */
        parameterStringWithEmptyDefault: string;
        /**
         * This is a string with no default
         */
        parameterStringWithNoDefault: string;
    };
};

export type CollectionFormatData = {
    CollectionFormat: {
        /**
         * This is an array parameter that is sent as csv format (comma-separated values)
         */
        parameterArrayCsv: Array<string>;
        /**
         * This is an array parameter that is sent as multi format (multiple parameter instances)
         */
        parameterArrayMulti: Array<string>;
        /**
         * This is an array parameter that is sent as pipes format (pipe-separated values)
         */
        parameterArrayPipes: Array<string>;
        /**
         * This is an array parameter that is sent as ssv format (space-separated values)
         */
        parameterArraySsv: Array<string>;
        /**
         * This is an array parameter that is sent as tsv format (tab-separated values)
         */
        parameterArrayTsv: Array<string>;
    };
};

export type TypesData = {
    Types: {
        /**
         * This is a number parameter
         */
        id?: number;
        /**
         * This is an array parameter
         */
        parameterArray: Array<string>;
        /**
         * This is a boolean parameter
         */
        parameterBoolean: boolean;
        /**
         * This is a dictionary parameter
         */
        parameterDictionary: Record<string, string>;
        /**
         * This is an enum parameter
         */
        parameterEnum: 'Success' | 'Warning' | 'Error';
        /**
         * This is a number parameter
         */
        parameterNumber: number;
        /**
         * This is an object parameter
         */
        parameterObject: unknown;
        /**
         * This is a string parameter
         */
        parameterString: string;
    };
};

export type ComplexData = {
    ComplexTypes: {
        /**
         * Parameter containing object
         */
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        };
        /**
         * Parameter containing reference
         */
        parameterReference: ModelWithString;
    };
};

export type ErrorData = {
    TestErrorCode: {
        /**
         * Status code to return
         */
        status: string;
    };
};

export type NonAsciiÆøåÆøÅöôêÊData = {
    NonAsciiæøåÆøÅöôêÊ字符串: {
        /**
         * Dummy input param
         */
        nonAsciiParamæøåÆøÅöôêÊ: number;
    };
};

export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}

export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

export class DescriptionsService {
    /**
     * @throws ApiError
     */
    public static callWithDescriptions(data: DescriptionsData['CallWithDescriptions'] = {}): CancelablePromise<void> {
        const {
            parameterWithBreaks,
            parameterWithBackticks,
            parameterWithSlashes,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks,
                parameterWithBackticks,
                parameterWithSlashes,
                parameterWithExpressionPlaceholders,
                parameterWithQuotes,
                parameterWithReservedCharacters,
            },
        });
    }
}

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static callWithParameters(data: ParametersData['CallWithParameters']): CancelablePromise<void> {
        const { parameterHeader, parameterQuery, parameterForm, parameterBody, parameterPath } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            headers: {
                parameterHeader,
            },
            query: {
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: parameterBody,
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        data: ParametersData['CallWithWeirdParameterNames']
    ): CancelablePromise<void> {
        const {
            parameterHeader,
            parameterQuery,
            parameterForm,
            parameterBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            _default,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: parameterBody,
        });
    }
}

export class DefaultsService {
    /**
     * @throws ApiError
     */
    public static callWithDefaultParameters(data: DefaultsData['CallWithDefaultParameters']): CancelablePromise<void> {
        const {
            parameterString = 'Hello World!',
            parameterNumber = 123,
            parameterBoolean = true,
            parameterEnum = 'Success',
            parameterModel = {
                prop: 'Hello World!',
            },
        } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        data: DefaultsData['CallWithDefaultOptionalParameters'] = {}
    ): CancelablePromise<void> {
        const {
            parameterString = 'Hello World!',
            parameterNumber = 123,
            parameterBoolean = true,
            parameterEnum = 'Success',
            parameterModel = {
                prop: 'Hello World!',
            },
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callToTestOrderOfParams(data: DefaultsData['CallToTestOrderOfParams']): CancelablePromise<void> {
        const {
            parameterStringWithNoDefault,
            parameterOptionalStringWithDefault = 'Hello World!',
            parameterOptionalStringWithEmptyDefault = '',
            parameterOptionalStringWithNoDefault,
            parameterStringWithDefault = 'Hello World!',
            parameterStringWithEmptyDefault = '',
            parameterStringNullableWithNoDefault,
            parameterStringNullableWithDefault = null,
        } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault,
                parameterOptionalStringWithEmptyDefault,
                parameterOptionalStringWithNoDefault,
                parameterStringWithDefault,
                parameterStringWithEmptyDefault,
                parameterStringWithNoDefault,
                parameterStringNullableWithNoDefault,
                parameterStringNullableWithDefault,
            },
        });
    }
}

export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

export class NoContentService {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns any Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<any | void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

export class ResponseService {
    /**
     * @returns any Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<any | void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<
        | {
              readonly '@namespace.string'?: string;
              readonly '@namespace.integer'?: number;
              readonly value?: Array<ModelWithString>;
          }
        | ModelWithString
        | ModelThatExtends
        | ModelThatExtendsExtends
    > {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

export class MultipleTags1Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags2Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags3Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class CollectionFormatService {
    /**
     * @throws ApiError
     */
    public static collectionFormat(data: CollectionFormatData['CollectionFormat']): CancelablePromise<void> {
        const { parameterArrayCsv, parameterArraySsv, parameterArrayTsv, parameterArrayPipes, parameterArrayMulti } =
            data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                parameterArrayCSV: parameterArrayCsv,
                parameterArraySSV: parameterArraySsv,
                parameterArrayTSV: parameterArrayTsv,
                parameterArrayPipes,
                parameterArrayMulti,
            },
        });
    }
}

export class TypesService {
    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(data: TypesData['Types']): CancelablePromise<number | string | boolean | unknown> {
        const {
            parameterArray,
            parameterDictionary,
            parameterEnum,
            parameterNumber = 123,
            parameterString = 'default',
            parameterBoolean = true,
            parameterObject = null,
            id,
        } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id,
            },
            query: {
                parameterNumber,
                parameterString,
                parameterBoolean,
                parameterObject,
                parameterArray,
                parameterDictionary,
                parameterEnum,
            },
        });
    }
}

export class ComplexService {
    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(data: ComplexData['ComplexTypes']): CancelablePromise<Array<ModelWithString>> {
        const { parameterObject, parameterReference } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                parameterObject,
                parameterReference,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class ErrorService {
    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(data: ErrorData['TestErrorCode']): CancelablePromise<any> {
        const { status } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

export class NonAsciiÆøåÆøÅöôêÊService {
    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public static nonAsciiæøåÆøÅöôêÊ字符串(
        data: NonAsciiÆøåÆøÅöôêÊData['NonAsciiæøåÆøÅöôêÊ字符串']
    ): CancelablePromise<NonAsciiStringæøåÆØÅöôêÊ字符串> {
        const { nonAsciiParamæøåÆøÅöôêÊ } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
            },
        });
    }
}
