import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
import type { ModelWithNestedArrayEnumsDataFoo } from '../models';
import type { ModelWithOneOfEnum } from '../models';
import type { ModelWithString } from '../models';
import type { Pageable } from '../models';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TDataDeleteFoo = {
    /**
     * bar in method
     */
    bar: string;
    /**
     * foo in method
     */
    foo: string;
};
export type TDataCallWithParameters = {
    fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
    fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string | null;
    /**
     * This is the parameter that goes into the query params
     */
    parameterQuery: string | null;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;
};
export type TDataCallWithWeirdParameterNames = {
    /**
     * This is the parameter with a reserved keyword
     */
    _default?: string;
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string;
    /**
     * This is the parameter that goes into the request query params
     */
    parameterQuery: string | null;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;
};
export type TDataGetCallWithOptionalParam = {
    /**
     * This is an optional parameter
     */
    parameter?: string;
    /**
     * This is a required parameter
     */
    requestBody: ModelWithOneOfEnum;
};
export type TDataPostCallWithOptionalParam = {
    /**
     * This is a required parameter
     */
    parameter: Pageable;
    /**
     * This is an optional parameter
     */
    requestBody?: ModelWithString;
};

@Injectable({
    providedIn: 'root',
})
export class ParametersService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public deleteFoo(data: TDataDeleteFoo): Observable<void> {
        const { bar, foo } = data;
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {
                foo,
                bar,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callWithParameters(data: TDataCallWithParameters): Observable<void> {
        const {
            fooAllOfEnum,
            fooRefEnum,
            parameterCookie,
            parameterForm,
            parameterHeader,
            parameterPath,
            parameterQuery,
            requestBody,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            cookies: {
                parameterCookie,
            },
            headers: {
                parameterHeader,
            },
            query: {
                foo_ref_enum: fooRefEnum,
                foo_all_of_enum: fooAllOfEnum,
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public callWithWeirdParameterNames(data: TDataCallWithWeirdParameterNames): Observable<void> {
        const {
            _default,
            parameterCookie,
            parameterForm,
            parameterHeader,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            parameterQuery,
            requestBody,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public getCallWithOptionalParam(data: TDataGetCallWithOptionalParam): Observable<void> {
        const { parameter, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public postCallWithOptionalParam(data: TDataPostCallWithOptionalParam): Observable<void> {
        const { parameter, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}
