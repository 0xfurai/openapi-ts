// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { $OpenApiTs } from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public serviceWithEmptyTag(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/no-tag',
    });
  }

  /**
   * @returns ModelWithReadOnlyAndWriteOnly
   * @throws ApiError
   */
  public postServiceWithEmptyTag(
    data: $OpenApiTs['/api/v{api-version}/no-tag']['post']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/no-tag']['post']['res'][200]
  > {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/no-tag',
      body: requestBody,
      mediaType: 'application/json',
    });
  }
}

export class SimpleService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns Model_From_Zendesk Success
   * @throws ApiError
   */
  public apiVVersionOdataControllerCount(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/simple/$count']['get']['res'][200]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/simple/$count',
    });
  }

  /**
   * @throws ApiError
   */
  public getCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public putCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public postCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'OPTIONS',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public headCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'HEAD',
      url: '/api/v{api-version}/simple',
    });
  }

  /**
   * @throws ApiError
   */
  public patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/api/v{api-version}/simple',
    });
  }
}

export class ParametersService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public deleteFoo(
    data: $OpenApiTs['/api/v{api-version}/foo/{foo}/bar/{bar}']['delete']['req'],
  ): CancelablePromise<void> {
    const { foo, bar } = data;
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
      path: {
        foo,
        bar,
      },
    });
  }

  /**
   * @throws ApiError
   */
  public callWithParameters(
    data: $OpenApiTs['/api/v{api-version}/parameters/{parameterPath}']['post']['req'],
  ): CancelablePromise<void> {
    const {
      parameterHeader,
      fooAllOfEnum,
      parameterQuery,
      parameterForm,
      parameterCookie,
      parameterPath,
      requestBody,
      fooRefEnum,
    } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/parameters/{parameterPath}',
      path: {
        parameterPath,
      },
      cookies: {
        parameterCookie,
      },
      headers: {
        parameterHeader,
      },
      query: {
        foo_ref_enum: fooRefEnum,
        foo_all_of_enum: fooAllOfEnum,
        parameterQuery,
      },
      formData: {
        parameterForm,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @throws ApiError
   */
  public callWithWeirdParameterNames(
    data: $OpenApiTs['/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}']['post']['req'],
  ): CancelablePromise<void> {
    const {
      parameterHeader,
      parameterQuery,
      parameterForm,
      parameterCookie,
      requestBody,
      parameterPath1,
      parameterPath2,
      parameterPath3,
      _default,
    } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
      path: {
        'parameter.path.1': parameterPath1,
        'parameter-path-2': parameterPath2,
        'PARAMETER-PATH-3': parameterPath3,
      },
      cookies: {
        'PARAMETER-COOKIE': parameterCookie,
      },
      headers: {
        'parameter.header': parameterHeader,
      },
      query: {
        default: _default,
        'parameter-query': parameterQuery,
      },
      formData: {
        parameter_form: parameterForm,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @throws ApiError
   */
  public getCallWithOptionalParam(
    data: $OpenApiTs['/api/v{api-version}/parameters/']['get']['req'],
  ): CancelablePromise<void> {
    const { requestBody, parameter } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/parameters/',
      query: {
        parameter,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * @throws ApiError
   */
  public postCallWithOptionalParam(
    data: $OpenApiTs['/api/v{api-version}/parameters/']['post']['req'],
  ): CancelablePromise<void> {
    const { parameter, requestBody } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/parameters/',
      query: {
        parameter,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }
}

export class DescriptionsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public callWithDescriptions(
    data: $OpenApiTs['/api/v{api-version}/descriptions/']['post']['req'] = {},
  ): CancelablePromise<void> {
    const {
      parameterWithBreaks,
      parameterWithBackticks,
      parameterWithSlashes,
      parameterWithExpressionPlaceholders,
      parameterWithQuotes,
      parameterWithReservedCharacters,
    } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/descriptions/',
      query: {
        parameterWithBreaks,
        parameterWithBackticks,
        parameterWithSlashes,
        parameterWithExpressionPlaceholders,
        parameterWithQuotes,
        parameterWithReservedCharacters,
      },
    });
  }
}

export class DeprecatedService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @deprecated
   * @throws ApiError
   */
  public deprecatedCall(
    data: $OpenApiTs['/api/v{api-version}/parameters/deprecated']['post']['req'],
  ): CancelablePromise<void> {
    const { parameter } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/parameters/deprecated',
      headers: {
        parameter,
      },
    });
  }
}

export class RequestBodyService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public postApiRequestBody(
    data: $OpenApiTs['/api/v{api-version}/requestBody/']['post']['req'] = {},
  ): CancelablePromise<void> {
    const { parameter, foo } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/requestBody/',
      query: {
        parameter,
      },
      body: foo,
      mediaType: 'application/json',
    });
  }
}

export class FormDataService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public postApiFormData(
    data: $OpenApiTs['/api/v{api-version}/formData/']['post']['req'] = {},
  ): CancelablePromise<void> {
    const { parameter, formData } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/formData/',
      query: {
        parameter,
      },
      formData,
      mediaType: 'multipart/form-data',
    });
  }
}

export class DefaultsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public callWithDefaultParameters(
    data: $OpenApiTs['/api/v{api-version}/defaults']['get']['req'] = {},
  ): CancelablePromise<void> {
    const {
      parameterString,
      parameterNumber,
      parameterBoolean,
      parameterEnum,
      parameterModel,
    } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/defaults',
      query: {
        parameterString,
        parameterNumber,
        parameterBoolean,
        parameterEnum,
        parameterModel,
      },
    });
  }

  /**
   * @throws ApiError
   */
  public callWithDefaultOptionalParameters(
    data: $OpenApiTs['/api/v{api-version}/defaults']['post']['req'] = {},
  ): CancelablePromise<void> {
    const {
      parameterString,
      parameterNumber,
      parameterBoolean,
      parameterEnum,
      parameterModel,
    } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/defaults',
      query: {
        parameterString,
        parameterNumber,
        parameterBoolean,
        parameterEnum,
        parameterModel,
      },
    });
  }

  /**
   * @throws ApiError
   */
  public callToTestOrderOfParams(
    data: $OpenApiTs['/api/v{api-version}/defaults']['put']['req'],
  ): CancelablePromise<void> {
    const {
      parameterStringWithNoDefault,
      parameterOptionalStringWithDefault,
      parameterOptionalStringWithEmptyDefault,
      parameterOptionalStringWithNoDefault,
      parameterStringWithDefault,
      parameterStringWithEmptyDefault,
      parameterStringNullableWithNoDefault,
      parameterStringNullableWithDefault,
    } = data;
    return this.httpRequest.request({
      method: 'PUT',
      url: '/api/v{api-version}/defaults',
      query: {
        parameterOptionalStringWithDefault,
        parameterOptionalStringWithEmptyDefault,
        parameterOptionalStringWithNoDefault,
        parameterStringWithDefault,
        parameterStringWithEmptyDefault,
        parameterStringWithNoDefault,
        parameterStringNullableWithNoDefault,
        parameterStringNullableWithDefault,
      },
    });
  }
}

export class DuplicateService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public duplicateName(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/duplicate',
    });
  }

  /**
   * @throws ApiError
   */
  public duplicateName1(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/duplicate',
    });
  }

  /**
   * @throws ApiError
   */
  public duplicateName2(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/api/v{api-version}/duplicate',
    });
  }

  /**
   * @throws ApiError
   */
  public duplicateName3(): CancelablePromise<void> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/api/v{api-version}/duplicate',
    });
  }
}

export class NoContentService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns void Success
   * @throws ApiError
   */
  public callWithNoContentResponse(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/no-content']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/no-content',
    });
  }

  /**
   * @returns number Response is a simple number
   * @returns void Success
   * @throws ApiError
   */
  public callWithResponseAndNoContentResponse(): CancelablePromise<
    | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][200]
    | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/response-and-no-content',
    });
  }
}

export class ResponseService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns number Response is a simple number
   * @returns void Success
   * @throws ApiError
   */
  public callWithResponseAndNoContentResponse(): CancelablePromise<
    | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][200]
    | $OpenApiTs['/api/v{api-version}/multiple-tags/response-and-no-content']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/response-and-no-content',
    });
  }

  /**
   * @returns ModelWithString
   * @throws ApiError
   */
  public callWithResponse(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/response']['get']['res'][200]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/response',
    });
  }

  /**
   * @returns ModelWithString Message for default response
   * @throws ApiError
   */
  public callWithDuplicateResponses(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/response']['post']['res'][200]
  > {
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/response',
      errors: {
        500: 'Message for 500 error',
        501: 'Message for 501 error',
        502: 'Message for 502 error',
      },
    });
  }

  /**
   * @returns unknown Message for 200 response
   * @returns ModelWithString Message for default response
   * @returns ModelThatExtends Message for 201 response
   * @returns ModelThatExtendsExtends Message for 202 response
   * @throws ApiError
   */
  public callWithResponses(): CancelablePromise<
    | $OpenApiTs['/api/v{api-version}/response']['put']['res'][200]
    | $OpenApiTs['/api/v{api-version}/response']['put']['res'][200]
    | $OpenApiTs['/api/v{api-version}/response']['put']['res'][201]
    | $OpenApiTs['/api/v{api-version}/response']['put']['res'][202]
  > {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/api/v{api-version}/response',
      errors: {
        500: 'Message for 500 error',
        501: 'Message for 501 error',
        502: 'Message for 502 error',
      },
    });
  }
}

export class MultipleTags1Service {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns void Success
   * @throws ApiError
   */
  public dummyA(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multiple-tags/a']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/a',
    });
  }

  /**
   * @returns void Success
   * @throws ApiError
   */
  public dummyB(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/b',
    });
  }
}

export class MultipleTags2Service {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns void Success
   * @throws ApiError
   */
  public dummyA(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multiple-tags/a']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/a',
    });
  }

  /**
   * @returns void Success
   * @throws ApiError
   */
  public dummyB(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/b',
    });
  }
}

export class MultipleTags3Service {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns void Success
   * @throws ApiError
   */
  public dummyB(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multiple-tags/b']['get']['res'][204]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multiple-tags/b',
    });
  }
}

export class CollectionFormatService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public collectionFormat(
    data: $OpenApiTs['/api/v{api-version}/collectionFormat']['get']['req'],
  ): CancelablePromise<void> {
    const {
      parameterArrayCsv,
      parameterArraySsv,
      parameterArrayTsv,
      parameterArrayPipes,
      parameterArrayMulti,
    } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/collectionFormat',
      query: {
        parameterArrayCSV: parameterArrayCsv,
        parameterArraySSV: parameterArraySsv,
        parameterArrayTSV: parameterArrayTsv,
        parameterArrayPipes,
        parameterArrayMulti,
      },
    });
  }
}

export class TypesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns number Response is a simple number
   * @returns string Response is a simple string
   * @returns boolean Response is a simple boolean
   * @returns unknown Response is a simple object
   * @throws ApiError
   */
  public types(
    data: $OpenApiTs['/api/v{api-version}/types']['get']['req'],
  ): CancelablePromise<
    | $OpenApiTs['/api/v{api-version}/types']['get']['res'][200]
    | $OpenApiTs['/api/v{api-version}/types']['get']['res'][201]
    | $OpenApiTs['/api/v{api-version}/types']['get']['res'][202]
    | $OpenApiTs['/api/v{api-version}/types']['get']['res'][203]
  > {
    const {
      parameterArray,
      parameterDictionary,
      parameterEnum,
      parameterNumber,
      parameterString,
      parameterBoolean,
      parameterObject,
      id,
    } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/types',
      path: {
        id,
      },
      query: {
        parameterNumber,
        parameterString,
        parameterBoolean,
        parameterObject,
        parameterArray,
        parameterDictionary,
        parameterEnum,
      },
    });
  }
}

export class UploadService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns boolean
   * @throws ApiError
   */
  public uploadFile(
    data: $OpenApiTs['/api/v{api-version}/upload']['post']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/upload']['post']['res'][200]
  > {
    const { file } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/upload',
      formData: {
        file,
      },
    });
  }
}

export class FileResponseService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns binary Success
   * @throws ApiError
   */
  public fileResponse(
    data: $OpenApiTs['/api/v{api-version}/file/{id}']['get']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/file/{id}']['get']['res'][200]
  > {
    const { id } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/file/{id}',
      path: {
        id,
      },
    });
  }
}

export class ComplexService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns ModelWithString Successful response
   * @throws ApiError
   */
  public complexTypes(
    data: $OpenApiTs['/api/v{api-version}/complex']['get']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/complex']['get']['res'][200]
  > {
    const { parameterObject, parameterReference } = data;
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/complex',
      query: {
        parameterObject,
        parameterReference,
      },
      errors: {
        400: '400 `server` error',
        500: '500 server error',
      },
    });
  }

  /**
   * @returns ModelWithString Success
   * @throws ApiError
   */
  public complexParams(
    data: $OpenApiTs['/api/v{api-version}/complex/{id}']['put']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/complex/{id}']['put']['res'][200]
  > {
    const { id, requestBody } = data;
    return this.httpRequest.request({
      method: 'PUT',
      url: '/api/v{api-version}/complex/{id}',
      path: {
        id,
      },
      body: requestBody,
      mediaType: 'application/json-patch+json',
    });
  }
}

export class MultipartService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @throws ApiError
   */
  public multipartRequest(
    data: $OpenApiTs['/api/v{api-version}/multipart']['post']['req'] = {},
  ): CancelablePromise<void> {
    const { formData } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/multipart',
      formData,
      mediaType: 'multipart/form-data',
    });
  }

  /**
   * @returns unknown OK
   * @throws ApiError
   */
  public multipartResponse(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/multipart']['get']['res'][200]
  > {
    return this.httpRequest.request({
      method: 'GET',
      url: '/api/v{api-version}/multipart',
    });
  }
}

export class HeaderService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns string Successful response
   * @throws ApiError
   */
  public callWithResultFromHeader(): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/header']['post']['res'][200]
  > {
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/header',
      responseHeader: 'operation-location',
      errors: {
        400: '400 server error',
        500: '500 server error',
      },
    });
  }
}

export class ErrorService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns unknown Custom message: Successful response
   * @throws ApiError
   */
  public testErrorCode(
    data: $OpenApiTs['/api/v{api-version}/error']['post']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/error']['post']['res'][200]
  > {
    const { status } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/error',
      query: {
        status,
      },
      errors: {
        500: 'Custom message: Internal Server Error',
        501: 'Custom message: Not Implemented',
        502: 'Custom message: Bad Gateway',
        503: 'Custom message: Service Unavailable',
      },
    });
  }
}

export class NonAsciiÆøåÆøÅöôêÊService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
   * @throws ApiError
   */
  public nonAsciiæøåÆøÅöôêÊ字符串(
    data: $OpenApiTs['/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串']['post']['req'],
  ): CancelablePromise<
    $OpenApiTs['/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串']['post']['res'][200]
  > {
    const { nonAsciiParamæøåÆøÅöôêÊ } = data;
    return this.httpRequest.request({
      method: 'POST',
      url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
      query: {
        nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
      },
    });
  }
}
