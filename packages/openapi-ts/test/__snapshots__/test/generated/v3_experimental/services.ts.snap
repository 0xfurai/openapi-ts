import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
    DefaultData,
    SimpleData,
    ParametersData,
    DescriptionsData,
    DeprecatedData,
    RequestBodyData,
    FormDataData,
    DefaultsData,
    DuplicateData,
    NoContentData,
    ResponseData,
    MultipleTags1Data,
    MultipleTags2Data,
    MultipleTags3Data,
    CollectionFormatData,
    TypesData,
    UploadData,
    FileResponseData,
    ComplexData,
    MultipartData,
    HeaderData,
    ErrorData,
    NonAsciiÆøåÆøÅöôêÊData,
} from './models';

export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<DefaultData['responses']['ServiceWithEmptyTag']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public static postServiceWithEmptyTag(
        data: DefaultData['payloads']['PostServiceWithEmptyTag']
    ): CancelablePromise<DefaultData['responses']['PostServiceWithEmptyTag']> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/no-tag',
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

export class SimpleService {
    /**
     * @returns Model_From_Zendesk Success
     * @throws ApiError
     */
    public static apiVVersionOdataControllerCount(): CancelablePromise<
        SimpleData['responses']['ApiVversionOdataControllerCount']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple/$count',
        });
    }

    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['GetCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['PutCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['PostCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['DeleteCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['OptionsCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['HeadCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<
        SimpleData['responses']['PatchCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static deleteFoo(
        data: ParametersData['payloads']['DeleteFoo']
    ): CancelablePromise<ParametersData['responses']['DeleteFoo']> {
        const { query, foo, bar } = data;
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {},
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithParameters(
        data: ParametersData['payloads']['CallWithParameters']
    ): CancelablePromise<ParametersData['responses']['CallWithParameters']> {
        const { query, parameterHeader, parameterForm, parameterCookie, parameterPath, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        data: ParametersData['payloads']['CallWithWeirdParameterNames']
    ): CancelablePromise<ParametersData['responses']['CallWithWeirdParameterNames']> {
        const {
            query,
            parameterHeader,
            parameterForm,
            parameterCookie,
            requestBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static getCallWithOptionalParam(
        data: ParametersData['payloads']['GetCallWithOptionalParam']
    ): CancelablePromise<ParametersData['responses']['GetCallWithOptionalParam']> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithOptionalParam(
        data: ParametersData['payloads']['PostCallWithOptionalParam']
    ): CancelablePromise<ParametersData['responses']['PostCallWithOptionalParam']> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

export class DescriptionsService {
    /**
     * @throws ApiError
     */
    public static callWithDescriptions(
        data: DescriptionsData['payloads']['CallWithDescriptions'] = {}
    ): CancelablePromise<DescriptionsData['responses']['CallWithDescriptions']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                ...query,
            },
        });
    }
}

export class DeprecatedService {
    /**
     * @deprecated
     * @throws ApiError
     */
    public static deprecatedCall(
        data: DeprecatedData['payloads']['DeprecatedCall']
    ): CancelablePromise<DeprecatedData['responses']['DeprecatedCall']> {
        const { query, parameter } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {},
        });
    }
}

export class RequestBodyService {
    /**
     * @throws ApiError
     */
    public static postApiRequestBody(
        data: RequestBodyData['payloads']['PostApiRequestBody'] = {}
    ): CancelablePromise<RequestBodyData['responses']['PostApiRequestBody']> {
        const { query, foo } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                ...query,
            },
            body: foo,
            mediaType: 'application/json',
        });
    }
}

export class FormDataService {
    /**
     * @throws ApiError
     */
    public static postApiFormData(
        data: FormDataData['payloads']['PostApiFormData'] = {}
    ): CancelablePromise<FormDataData['responses']['PostApiFormData']> {
        const { query, formData } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                ...query,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
}

export class DefaultsService {
    /**
     * @throws ApiError
     */
    public static callWithDefaultParameters(
        data: DefaultsData['payloads']['CallWithDefaultParameters'] = {}
    ): CancelablePromise<DefaultsData['responses']['CallWithDefaultParameters']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: 'Hello World!',
                parameterNumber: 123,
                parameterBoolean: true,
                parameterEnum: 'Success',
                parameterModel: {
                    prop: 'Hello World!',
                },
                ...query,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        data: DefaultsData['payloads']['CallWithDefaultOptionalParameters'] = {}
    ): CancelablePromise<DefaultsData['responses']['CallWithDefaultOptionalParameters']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: 'Hello World!',
                parameterNumber: 123,
                parameterBoolean: true,
                parameterEnum: 'Success',
                parameterModel: {
                    prop: 'Hello World!',
                },
                ...query,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callToTestOrderOfParams(
        data: DefaultsData['payloads']['CallToTestOrderOfParams']
    ): CancelablePromise<DefaultsData['responses']['CallToTestOrderOfParams']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault: 'Hello World!',
                parameterOptionalStringWithEmptyDefault: '',
                parameterStringWithDefault: 'Hello World!',
                parameterStringWithEmptyDefault: '',
                parameterStringNullableWithDefault: null,
                ...query,
            },
        });
    }
}

export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<DuplicateData['responses']['DuplicateName']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<DuplicateData['responses']['DuplicateName1']> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<DuplicateData['responses']['DuplicateName2']> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<DuplicateData['responses']['DuplicateName3']> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

export class NoContentService {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<
        NoContentData['responses']['CallWithNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<
        NoContentData['responses']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

export class ResponseService {
    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<
        ResponseData['responses']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ResponseData['responses']['CallWithResponse']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<
        ResponseData['responses']['CallWithDuplicateResponses']
    > {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<ResponseData['responses']['CallWithResponses']> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

export class MultipleTags1Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<MultipleTags1Data['responses']['DummyA']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<MultipleTags1Data['responses']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags2Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<MultipleTags2Data['responses']['DummyA']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<MultipleTags2Data['responses']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags3Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<MultipleTags3Data['responses']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class CollectionFormatService {
    /**
     * @throws ApiError
     */
    public static collectionFormat(
        data: CollectionFormatData['payloads']['CollectionFormat']
    ): CancelablePromise<CollectionFormatData['responses']['CollectionFormat']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                ...query,
            },
        });
    }
}

export class TypesService {
    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public static types(data: TypesData['payloads']['Types']): CancelablePromise<TypesData['responses']['Types']> {
        const { query, id } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {},
            query: {
                parameterNumber: 123,
                parameterString: 'default',
                parameterBoolean: true,
                parameterObject: null,
                ...query,
            },
        });
    }
}

export class UploadService {
    /**
     * @returns boolean
     * @throws ApiError
     */
    public static uploadFile(
        data: UploadData['payloads']['UploadFile']
    ): CancelablePromise<UploadData['responses']['UploadFile']> {
        const { query, file } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {},
        });
    }
}

export class FileResponseService {
    /**
     * @returns binary Success
     * @throws ApiError
     */
    public static fileResponse(
        data: FileResponseData['payloads']['FileResponse']
    ): CancelablePromise<FileResponseData['responses']['FileResponse']> {
        const { query, id } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            path: {},
        });
    }
}

export class ComplexService {
    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(
        data: ComplexData['payloads']['ComplexTypes']
    ): CancelablePromise<ComplexData['responses']['ComplexTypes']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                ...query,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }

    /**
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public static complexParams(
        data: ComplexData['payloads']['ComplexParams']
    ): CancelablePromise<ComplexData['responses']['ComplexParams']> {
        const { query, id, requestBody } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {},
            body: requestBody,
            mediaType: 'application/json-patch+json',
        });
    }
}

export class MultipartService {
    /**
     * @throws ApiError
     */
    public static multipartRequest(
        data: MultipartData['payloads']['MultipartRequest'] = {}
    ): CancelablePromise<MultipartData['responses']['MultipartRequest']> {
        const { query, formData } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public static multipartResponse(): CancelablePromise<MultipartData['responses']['MultipartResponse']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
        });
    }
}

export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<HeaderData['responses']['CallWithResultFromHeader']> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class ErrorService {
    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(
        data: ErrorData['payloads']['TestErrorCode']
    ): CancelablePromise<ErrorData['responses']['TestErrorCode']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                ...query,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

export class NonAsciiÆøåÆøÅöôêÊService {
    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public static nonAsciiæøåÆøÅöôêÊ字符串(
        data: NonAsciiÆøåÆøÅöôêÊData['payloads']['NonAsciiæøåÆøÅöôêÊ字符串']
    ): CancelablePromise<NonAsciiÆøåÆøÅöôêÊData['responses']['NonAsciiæøåÆøÅöôêÊ字符串']> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                ...query,
            },
        });
    }
}
