// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type MutationOptions } from '@tanstack/svelte-query';
import type { ParentModelWithDatesError, ParentModelWithDatesResponse, ModelWithDatesError, ModelWithDatesResponse, ModelWithDatesArrayError, ModelWithDatesArrayResponse, ArrayOfDatesError, ArrayOfDatesResponse, DateError, DateResponse, MultipleResponsesError, MultipleResponsesResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { parentModelWithDates, modelWithDates, modelWithDatesArray, arrayOfDates, date, multipleResponses } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    {
        infinite?: boolean;
        params: Pick<TOptions, "body" | "headers" | "path" | "query">;
        scope: string;
    }
];

const createQueryKeyParams = <TOptions extends Options>(options?: TOptions): QueryKey<TOptions>[0]["params"] => {
    const params: QueryKey<TOptions>[0]["params"] = {} as QueryKey<TOptions>[0]["params"];
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const parentModelWithDatesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await parentModelWithDates({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'parentModelWithDates'
        }
    ]
}); };

export const parentModelWithDatesMutation: MutationOptions<ParentModelWithDatesResponse, AxiosError<ParentModelWithDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await parentModelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const modelWithDatesMutation: MutationOptions<ModelWithDatesResponse, AxiosError<ModelWithDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const modelWithDatesArrayMutation: MutationOptions<ModelWithDatesArrayResponse, AxiosError<ModelWithDatesArrayError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDatesArray({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const arrayOfDatesMutation: MutationOptions<ArrayOfDatesResponse, AxiosError<ArrayOfDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await arrayOfDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const dateMutation: MutationOptions<DateResponse, AxiosError<DateError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await date({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const multipleResponsesMutation: MutationOptions<MultipleResponsesResponse, AxiosError<MultipleResponsesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await multipleResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
};