import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
    $OpenApiTsDefault,
    $OpenApiTsSimple,
    $OpenApiTsParameters,
    $OpenApiTsDescriptions,
    $OpenApiTsDeprecated,
    $OpenApiTsRequestBody,
    $OpenApiTsFormData,
    $OpenApiTsDefaults,
    $OpenApiTsDuplicate,
    $OpenApiTsNoContent,
    $OpenApiTsResponse,
    $OpenApiTsMultipleTags1,
    $OpenApiTsMultipleTags2,
    $OpenApiTsMultipleTags3,
    $OpenApiTsCollectionFormat,
    $OpenApiTsTypes,
    $OpenApiTsUpload,
    $OpenApiTsFileResponse,
    $OpenApiTsComplex,
    $OpenApiTsMultipart,
    $OpenApiTsHeader,
    $OpenApiTsError,
    $OpenApiTsNonAsciiÆøåÆøÅöôêÊ,
} from './models';

@Injectable({
    providedIn: 'root',
})
export class DefaultService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public serviceWithEmptyTag(): Observable<$OpenApiTsDefault['res']['ServiceWithEmptyTag']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public postServiceWithEmptyTag(
        data: $OpenApiTsDefault['req']['PostServiceWithEmptyTag']
    ): Observable<$OpenApiTsDefault['res']['PostServiceWithEmptyTag']> {
        const { requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/no-tag',
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class SimpleService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns Model_From_Zendesk Success
     * @throws ApiError
     */
    public apiVVersionOdataControllerCount(): Observable<$OpenApiTsSimple['res']['ApiVversionOdataControllerCount']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple/$count',
        });
    }

    /**
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['GetCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['PutCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['PostCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['DeleteCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['OptionsCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['HeadCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(): Observable<
        $OpenApiTsSimple['res']['PatchCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class ParametersService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public deleteFoo(
        data: $OpenApiTsParameters['req']['DeleteFoo']
    ): Observable<$OpenApiTsParameters['res']['DeleteFoo']> {
        const { foo, bar } = data;
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {
                foo,
                bar,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callWithParameters(
        data: $OpenApiTsParameters['req']['CallWithParameters']
    ): Observable<$OpenApiTsParameters['res']['CallWithParameters']> {
        const {
            parameterHeader,
            fooAllOfEnum,
            parameterQuery,
            parameterForm,
            parameterCookie,
            parameterPath,
            requestBody,
            fooRefEnum,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            cookies: {
                parameterCookie,
            },
            headers: {
                parameterHeader,
            },
            query: {
                foo_ref_enum: fooRefEnum,
                foo_all_of_enum: fooAllOfEnum,
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public callWithWeirdParameterNames(
        data: $OpenApiTsParameters['req']['CallWithWeirdParameterNames']
    ): Observable<$OpenApiTsParameters['res']['CallWithWeirdParameterNames']> {
        const {
            parameterHeader,
            parameterQuery,
            parameterForm,
            parameterCookie,
            requestBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            _default,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public getCallWithOptionalParam(
        data: $OpenApiTsParameters['req']['GetCallWithOptionalParam']
    ): Observable<$OpenApiTsParameters['res']['GetCallWithOptionalParam']> {
        const { requestBody, parameter } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public postCallWithOptionalParam(
        data: $OpenApiTsParameters['req']['PostCallWithOptionalParam']
    ): Observable<$OpenApiTsParameters['res']['PostCallWithOptionalParam']> {
        const { parameter, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class DescriptionsService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public callWithDescriptions(
        data: $OpenApiTsDescriptions['req']['CallWithDescriptions'] = {}
    ): Observable<$OpenApiTsDescriptions['res']['CallWithDescriptions']> {
        const {
            parameterWithBreaks,
            parameterWithBackticks,
            parameterWithSlashes,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks,
                parameterWithBackticks,
                parameterWithSlashes,
                parameterWithExpressionPlaceholders,
                parameterWithQuotes,
                parameterWithReservedCharacters,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class DeprecatedService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @deprecated
     * @throws ApiError
     */
    public deprecatedCall(
        data: $OpenApiTsDeprecated['req']['DeprecatedCall']
    ): Observable<$OpenApiTsDeprecated['res']['DeprecatedCall']> {
        const { parameter } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {
                parameter,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class RequestBodyService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public postApiRequestBody(
        data: $OpenApiTsRequestBody['req']['PostApiRequestBody'] = {}
    ): Observable<$OpenApiTsRequestBody['res']['PostApiRequestBody']> {
        const { parameter, foo } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                parameter,
            },
            body: foo,
            mediaType: 'application/json',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class FormDataService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public postApiFormData(
        data: $OpenApiTsFormData['req']['PostApiFormData'] = {}
    ): Observable<$OpenApiTsFormData['res']['PostApiFormData']> {
        const { parameter, formData } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                parameter,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class DefaultsService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public callWithDefaultParameters(
        data: $OpenApiTsDefaults['req']['CallWithDefaultParameters'] = {}
    ): Observable<$OpenApiTsDefaults['res']['CallWithDefaultParameters']> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(
        data: $OpenApiTsDefaults['req']['CallWithDefaultOptionalParameters'] = {}
    ): Observable<$OpenApiTsDefaults['res']['CallWithDefaultOptionalParameters']> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callToTestOrderOfParams(
        data: $OpenApiTsDefaults['req']['CallToTestOrderOfParams']
    ): Observable<$OpenApiTsDefaults['res']['CallToTestOrderOfParams']> {
        const {
            parameterStringWithNoDefault,
            parameterOptionalStringWithDefault,
            parameterOptionalStringWithEmptyDefault,
            parameterOptionalStringWithNoDefault,
            parameterStringWithDefault,
            parameterStringWithEmptyDefault,
            parameterStringNullableWithNoDefault,
            parameterStringNullableWithDefault,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault,
                parameterOptionalStringWithEmptyDefault,
                parameterOptionalStringWithNoDefault,
                parameterStringWithDefault,
                parameterStringWithEmptyDefault,
                parameterStringWithNoDefault,
                parameterStringNullableWithNoDefault,
                parameterStringNullableWithDefault,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class DuplicateService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public duplicateName(): Observable<$OpenApiTsDuplicate['res']['DuplicateName']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName1(): Observable<$OpenApiTsDuplicate['res']['DuplicateName1']> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName2(): Observable<$OpenApiTsDuplicate['res']['DuplicateName2']> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName3(): Observable<$OpenApiTsDuplicate['res']['DuplicateName3']> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class NoContentService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public callWithNoContentResponse(): Observable<$OpenApiTsNoContent['res']['CallWithNoContentResponse']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<
        $OpenApiTsNoContent['res']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class ResponseService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<
        $OpenApiTsResponse['res']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public callWithResponse(): Observable<$OpenApiTsResponse['res']['CallWithResponse']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithDuplicateResponses(): Observable<$OpenApiTsResponse['res']['CallWithDuplicateResponses']> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(): Observable<$OpenApiTsResponse['res']['CallWithResponses']> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags1Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(): Observable<$OpenApiTsMultipleTags1['res']['DummyA']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<$OpenApiTsMultipleTags1['res']['DummyB']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags2Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(): Observable<$OpenApiTsMultipleTags2['res']['DummyA']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<$OpenApiTsMultipleTags2['res']['DummyB']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags3Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<$OpenApiTsMultipleTags3['res']['DummyB']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class CollectionFormatService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public collectionFormat(
        data: $OpenApiTsCollectionFormat['req']['CollectionFormat']
    ): Observable<$OpenApiTsCollectionFormat['res']['CollectionFormat']> {
        const { parameterArrayCsv, parameterArraySsv, parameterArrayTsv, parameterArrayPipes, parameterArrayMulti } =
            data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                parameterArrayCSV: parameterArrayCsv,
                parameterArraySSV: parameterArraySsv,
                parameterArrayTSV: parameterArrayTsv,
                parameterArrayPipes,
                parameterArrayMulti,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class TypesService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public types(data: $OpenApiTsTypes['req']['Types']): Observable<$OpenApiTsTypes['res']['Types']> {
        const {
            parameterArray,
            parameterDictionary,
            parameterEnum,
            parameterNumber,
            parameterString,
            parameterBoolean,
            parameterObject,
            id,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id,
            },
            query: {
                parameterNumber,
                parameterString,
                parameterBoolean,
                parameterObject,
                parameterArray,
                parameterDictionary,
                parameterEnum,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class UploadService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns boolean
     * @throws ApiError
     */
    public uploadFile(data: $OpenApiTsUpload['req']['UploadFile']): Observable<$OpenApiTsUpload['res']['UploadFile']> {
        const { file } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {
                file,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class FileResponseService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns binary Success
     * @throws ApiError
     */
    public fileResponse(
        data: $OpenApiTsFileResponse['req']['FileResponse']
    ): Observable<$OpenApiTsFileResponse['res']['FileResponse']> {
        const { id } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            path: {
                id,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class ComplexService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(
        data: $OpenApiTsComplex['req']['ComplexTypes']
    ): Observable<$OpenApiTsComplex['res']['ComplexTypes']> {
        const { parameterObject, parameterReference } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                parameterObject,
                parameterReference,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }

    /**
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public complexParams(
        data: $OpenApiTsComplex['req']['ComplexParams']
    ): Observable<$OpenApiTsComplex['res']['ComplexParams']> {
        const { id, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {
                id,
            },
            body: requestBody,
            mediaType: 'application/json-patch+json',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipartService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public multipartRequest(
        data: $OpenApiTsMultipart['req']['MultipartRequest'] = {}
    ): Observable<$OpenApiTsMultipart['res']['MultipartRequest']> {
        const { formData } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public multipartResponse(): Observable<$OpenApiTsMultipart['res']['MultipartResponse']> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class HeaderService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(): Observable<$OpenApiTsHeader['res']['CallWithResultFromHeader']> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class ErrorService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(
        data: $OpenApiTsError['req']['TestErrorCode']
    ): Observable<$OpenApiTsError['res']['TestErrorCode']> {
        const { status } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class NonAsciiÆøåÆøÅöôêÊService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public nonAsciiæøåÆøÅöôêÊ字符串(
        data: $OpenApiTsNonAsciiÆøåÆøÅöôêÊ['req']['NonAsciiæøåÆøÅöôêÊ字符串']
    ): Observable<$OpenApiTsNonAsciiÆøåÆøÅöôêÊ['res']['NonAsciiæøåÆøÅöôêÊ字符串']> {
        const { nonAsciiParamæøåÆøÅöôêÊ } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
            },
        });
    }
}
