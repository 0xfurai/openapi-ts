/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: Date;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
    patternWithNewline?: string;
    patternWithBacktick?: string;
};

export type $OpenApiTs = {
    '/api/v{api-version}/no-tag': {
        get: {
            res: void;
        };
        post: {
            req: {
                requestBody: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;
            };
            res: ModelWithReadOnlyAndWriteOnly;
        };
    };
    '/api/v{api-version}/simple/$count': {
        get: {
            res: Model_From_Zendesk;
        };
    };
    '/api/v{api-version}/simple': {
        get: {
            res: void;
        };
        put: {
            res: void;
        };
        post: {
            res: void;
        };
        delete: {
            res: void;
        };
        options: {
            res: void;
        };
        head: {
            res: void;
        };
        patch: {
            res: void;
        };
    };
    '/api/v{api-version}/foo/{foo}/bar/{bar}': {
        delete: {
            req: {
                /**
                 * foo in method
                 */
                foo: string;
                /**
                 * bar in method
                 */
                bar: string;
            };
            res: void;
        };
    };
    '/api/v{api-version}/parameters/{parameterPath}': {
        post: {
            req: {
                /**
                 * This is the parameter that goes into the header
                 */
                parameterHeader: string | null;
                fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
                /**
                 * This is the parameter that goes into the query params
                 */
                parameterQuery: string | null;
                /**
                 * This is the parameter that goes into the form data
                 */
                parameterForm: string | null;
                /**
                 * This is the parameter that goes into the cookie
                 */
                parameterCookie: string | null;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath: string | null;
                /**
                 * This is the parameter that goes into the body
                 */
                requestBody: ModelWithString | null;
                fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
            };
            res: void;
        };
    };
    '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}': {
        post: {
            req: {
                /**
                 * This is the parameter that goes into the request header
                 */
                parameterHeader: string | null;
                /**
                 * This is the parameter that goes into the request query params
                 */
                parameterQuery: string | null;
                /**
                 * This is the parameter that goes into the request form data
                 */
                parameterForm: string | null;
                /**
                 * This is the parameter that goes into the cookie
                 */
                parameterCookie: string | null;
                /**
                 * This is the parameter that goes into the body
                 */
                requestBody: ModelWithString | null;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath1?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath2?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath3?: string;
                /**
                 * This is the parameter with a reserved keyword
                 */
                _default?: string;
            };
            res: void;
        };
    };
    '/api/v{api-version}/parameters/': {
        get: {
            req: {
                /**
                 * This is a required parameter
                 */
                requestBody: ModelWithOneOfEnum;
                /**
                 * This is an optional parameter
                 */
                parameter?: string;
            };
            res: void;
        };
        post: {
            req: {
                /**
                 * This is a required parameter
                 */
                parameter: Pageable;
                /**
                 * This is an optional parameter
                 */
                requestBody?: ModelWithString;
            };
            res: void;
        };
    };
    '/api/v{api-version}/descriptions/': {
        post: {
            req: {
                /**
                 * Testing multiline comments in string: First line
                 * Second line
                 *
                 * Fourth line
                 */
                parameterWithBreaks?: unknown;
                /**
                 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
                 */
                parameterWithBackticks?: unknown;
                /**
                 * Testing slashes in string: \backwards\\\ and /forwards/// should work
                 */
                parameterWithSlashes?: unknown;
                /**
                 * Testing expression placeholders in string: ${expression} should work
                 */
                parameterWithExpressionPlaceholders?: unknown;
                /**
                 * Testing quotes in string: 'single quote''' and "double quotes""" should work
                 */
                parameterWithQuotes?: unknown;
                /**
                 * Testing reserved characters in string: * inline * and ** inline ** should work
                 */
                parameterWithReservedCharacters?: unknown;
            };
            res: void;
        };
    };
    '/api/v{api-version}/parameters/deprecated': {
        post: {
            req: {
                /**
                 * This parameter is deprecated
                 * @deprecated
                 */
                parameter: DeprecatedModel | null;
            };
            res: void;
        };
    };
    '/api/v{api-version}/requestBody/': {
        post: {
            req: {
                /**
                 * This is a reusable parameter
                 */
                parameter?: string;
                /**
                 * A reusable request body
                 */
                foo?: ModelWithString;
            };
            res: void;
        };
    };
    '/api/v{api-version}/formData/': {
        post: {
            req: {
                /**
                 * This is a reusable parameter
                 */
                parameter?: string;
                /**
                 * A reusable request body
                 */
                formData?: ModelWithString;
            };
            res: void;
        };
    };
    '/api/v{api-version}/defaults': {
        get: {
            req: {
                /**
                 * This is a simple string with default value
                 */
                parameterString?: string | null;
                /**
                 * This is a simple number with default value
                 */
                parameterNumber?: number | null;
                /**
                 * This is a simple boolean with default value
                 */
                parameterBoolean?: boolean | null;
                /**
                 * This is a simple enum with default value
                 */
                parameterEnum?: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model with default value
                 */
                parameterModel?: ModelWithString | null;
            };
            res: void;
        };
        post: {
            req: {
                /**
                 * This is a simple string that is optional with default value
                 */
                parameterString?: string;
                /**
                 * This is a simple number that is optional with default value
                 */
                parameterNumber?: number;
                /**
                 * This is a simple boolean that is optional with default value
                 */
                parameterBoolean?: boolean;
                /**
                 * This is a simple enum that is optional with default value
                 */
                parameterEnum?: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model that is optional with default value
                 */
                parameterModel?: ModelWithString;
            };
            res: void;
        };
        put: {
            req: {
                /**
                 * This is a string with no default
                 */
                parameterStringWithNoDefault: string;
                /**
                 * This is a optional string with default
                 */
                parameterOptionalStringWithDefault?: string;
                /**
                 * This is a optional string with empty default
                 */
                parameterOptionalStringWithEmptyDefault?: string;
                /**
                 * This is a optional string with no default
                 */
                parameterOptionalStringWithNoDefault?: string;
                /**
                 * This is a string with default
                 */
                parameterStringWithDefault: string;
                /**
                 * This is a string with empty default
                 */
                parameterStringWithEmptyDefault: string;
                /**
                 * This is a string that can be null with no default
                 */
                parameterStringNullableWithNoDefault?: string | null;
                /**
                 * This is a string that can be null with default
                 */
                parameterStringNullableWithDefault?: string | null;
            };
            res: void;
        };
    };
    '/api/v{api-version}/duplicate': {
        get: {
            res: void;
        };
        post: {
            res: void;
        };
        put: {
            res: void;
        };
        delete: {
            res: void;
        };
    };
    '/api/v{api-version}/no-content': {
        get: {
            res: void;
        };
    };
    '/api/v{api-version}/multiple-tags/response-and-no-content': {
        get: {
            res: number | void;
        };
    };
    '/api/v{api-version}/response': {
        get: {
            res: ModelWithString;
        };
        post: {
            res: ModelWithString;
        };
        put: {
            res:
                | {
                      readonly '@namespace.string'?: string;
                      readonly '@namespace.integer'?: number;
                      readonly value?: Array<ModelWithString>;
                  }
                | ModelWithString
                | ModelThatExtends
                | ModelThatExtendsExtends;
        };
    };
    '/api/v{api-version}/multiple-tags/a': {
        get: {
            res: void;
        };
    };
    '/api/v{api-version}/multiple-tags/b': {
        get: {
            res: void;
        };
    };
    '/api/v{api-version}/collectionFormat': {
        get: {
            req: {
                /**
                 * This is an array parameter that is sent as csv format (comma-separated values)
                 */
                parameterArrayCsv: Array<string> | null;
                /**
                 * This is an array parameter that is sent as ssv format (space-separated values)
                 */
                parameterArraySsv: Array<string> | null;
                /**
                 * This is an array parameter that is sent as tsv format (tab-separated values)
                 */
                parameterArrayTsv: Array<string> | null;
                /**
                 * This is an array parameter that is sent as pipes format (pipe-separated values)
                 */
                parameterArrayPipes: Array<string> | null;
                /**
                 * This is an array parameter that is sent as multi format (multiple parameter instances)
                 */
                parameterArrayMulti: Array<string> | null;
            };
            res: void;
        };
    };
    '/api/v{api-version}/types': {
        get: {
            req: {
                /**
                 * This is an array parameter
                 */
                parameterArray: Array<string> | null;
                /**
                 * This is a dictionary parameter
                 */
                parameterDictionary: Record<string, unknown> | null;
                /**
                 * This is an enum parameter
                 */
                parameterEnum: 'Success' | 'Warning' | 'Error' | null;
                /**
                 * This is a number parameter
                 */
                parameterNumber: number;
                /**
                 * This is a string parameter
                 */
                parameterString: string | null;
                /**
                 * This is a boolean parameter
                 */
                parameterBoolean: boolean | null;
                /**
                 * This is an object parameter
                 */
                parameterObject: Record<string, unknown> | null;
                /**
                 * This is a number parameter
                 */
                id?: number;
            };
            res: number | string | boolean | Record<string, unknown>;
        };
    };
    '/api/v{api-version}/upload': {
        post: {
            req: {
                /**
                 * Supply a file reference for upload
                 */
                file: Blob | File;
            };
            res: boolean;
        };
    };
    '/api/v{api-version}/file/{id}': {
        get: {
            req: {
                id: string;
            };
            res: Blob | File;
        };
    };
    '/api/v{api-version}/complex': {
        get: {
            req: {
                /**
                 * Parameter containing object
                 */
                parameterObject: {
                    first?: {
                        second?: {
                            third?: string;
                        };
                    };
                };
                /**
                 * Parameter containing reference
                 */
                parameterReference: ModelWithString;
            };
            res: Array<ModelWithString>;
        };
    };
    '/api/v{api-version}/complex/{id}': {
        put: {
            req: {
                id: number;
                requestBody?: {
                    readonly key: string | null;
                    name: string | null;
                    enabled?: boolean;
                    readonly type: 'Monkey' | 'Horse' | 'Bird';
                    listOfModels?: Array<ModelWithString> | null;
                    listOfStrings?: Array<string> | null;
                    parameters: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
                    readonly user?: {
                        readonly id?: number;
                        readonly name?: string | null;
                    };
                };
            };
            res: ModelWithString;
        };
    };
    '/api/v{api-version}/multipart': {
        post: {
            req: {
                formData?: {
                    content?: Blob | File;
                    data?: ModelWithString | null;
                };
            };
            res: void;
        };
        get: {
            res: {
                file?: Blob | File;
                metadata?: {
                    foo?: string;
                    bar?: string;
                };
            };
        };
    };
    '/api/v{api-version}/header': {
        post: {
            res: string;
        };
    };
    '/api/v{api-version}/error': {
        post: {
            req: {
                /**
                 * Status code to return
                 */
                status: number;
            };
            res: any;
        };
    };
    '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串': {
        post: {
            req: {
                /**
                 * Dummy input param
                 */
                nonAsciiParamæøåÆøÅöôêÊ: number;
            };
            res: Array<NonAsciiStringæøåÆØÅöôêÊ字符串>;
        };
    };
};
