// This file is auto-generated by @hey-api/openapi-ts

/**
 * Type of ticket being purchased. Use `general` for regular museum entry and `event` for tickets to special events.
 */
export type TicketType = 'event' | 'general';

export type Date = string;

/**
 * Email address for ticket purchaser.
 */
export type Email = string;

/**
 * Phone number for the ticket purchaser (optional).
 */
export type Phone = string;

/**
 * Request payload used for purchasing museum tickets.
 */
export type BuyMuseumTicketsRequest = {
  ticketType: TicketType;
  /**
   * Unique identifier for a special event. Required if purchasing tickets for the museum's special events.
   */
  eventId?: EventId;
  /**
   * Date that the ticket is valid for.
   */
  ticketDate: Date;
  email: Email;
  phone?: Phone;
};

/**
 * Confirmation message after a ticket purchase.
 */
export type TicketMessage = string;

/**
 * Unique identifier for museum ticket. Generated when purchased.
 */
export type TicketId = string;

/**
 * Unique confirmation code used to verify ticket purchase.
 */
export type TicketConfirmation = string;

/**
 * Details for a museum ticket after a successful purchase.
 */
export type BuyMuseumTicketsResponse = {
  message: TicketMessage;
  eventName?: EventName;
  ticketId: TicketId;
  ticketType: TicketType;
  /**
   * Date the ticket is valid for.
   */
  ticketDate: Date;
  confirmationCode: TicketConfirmation;
};

/**
 * Image of a ticket with a QR code used for museum or event entry.
 */
export type GetTicketCodeResponse = Blob | File;

/**
 * List of museum operating hours for consecutive days.
 */
export type GetMuseumHoursResponse = Array<MuseumDailyHours>;

/**
 * Daily operating hours for the museum.
 */
export type MuseumDailyHours = {
  /**
   * Date the operating hours apply to.
   */
  date: Date;
  /**
   * Time the museum opens on a specific date. Uses 24 hour time format (`HH:mm`).
   */
  timeOpen: string;
  /**
   * Time the museum closes on a specific date. Uses 24 hour time format (`HH:mm`).
   */
  timeClose: string;
};

/**
 * Identifier for a special event.
 */
export type EventId = string;

/**
 * Name of the special event.
 */
export type EventName = string;

/**
 * Location where the special event is held.
 */
export type EventLocation = string;

/**
 * Description of the special event.
 */
export type EventDescription = string;

/**
 * List of planned dates for the special event.
 */
export type EventDates = Array<Date>;

/**
 * Price of a ticket for the special event.
 */
export type EventPrice = number;

/**
 * Request payload for creating new special events at the museum.
 */
export type CreateSpecialEventRequest = {
  name: EventName;
  location: EventLocation;
  eventDescription: EventDescription;
  dates: EventDates;
  price: EventPrice;
};

/**
 * Request payload for updating an existing special event. Only included fields are updated in the event.
 */
export type UpdateSpecialEventRequest = {
  name?: EventName;
  location?: EventLocation;
  eventDescription?: EventDescription;
  dates?: EventDates;
  price?: EventPrice;
};

/**
 * List of upcoming special events.
 */
export type ListSpecialEventsResponse = Array<SpecialEventResponse>;

/**
 * Information about a special event.
 */
export type SpecialEventResponse = {
  eventId: EventId;
  name: EventName;
  location: EventLocation;
  eventDescription: EventDescription;
  dates: EventDates;
  price: EventPrice;
};

export type Error = {
  type?: string;
  title?: string;
};

/**
 * Page number to retrieve.
 */
export type ParameterPaginationPage = number;

/**
 * Number of days per page.
 */
export type ParameterPaginationLimit = number;

/**
 * Identifier for a special event.
 */
export type ParameterEventId = string;

/**
 * Starting date to retrieve future operating hours from. Defaults to today's date.
 */
export type ParameterStartDate = string;

/**
 * End of a date range to retrieve special events for. Defaults to 7 days after `startDate`.
 */
export type ParameterEndDate = string;

/**
 * Identifier for a ticket to a museum event. Used to generate ticket image.
 */
export type ParameterTicketId = string;

export type GetMuseumHoursData = {
  query?: {
    /**
     * Number of days per page.
     */
    limit?: number;
    /**
     * Page number to retrieve.
     */
    page?: number;
    /**
     * Starting date to retrieve future operating hours from. Defaults to today's date.
     */
    startDate?: string;
  };
};

export type GetMuseumHoursResponse2 = GetMuseumHoursResponse;

export type GetMuseumHoursError = Error;

export type CreateSpecialEventData = {
  body: CreateSpecialEventRequest;
};

export type CreateSpecialEventResponse = SpecialEventResponse;

export type CreateSpecialEventError = Error;

export type ListSpecialEventsData = {
  query?: {
    /**
     * End of a date range to retrieve special events for. Defaults to 7 days after `startDate`.
     */
    endDate?: string;
    /**
     * Number of days per page.
     */
    limit?: number;
    /**
     * Page number to retrieve.
     */
    page?: number;
    /**
     * Starting date to retrieve future operating hours from. Defaults to today's date.
     */
    startDate?: string;
  };
};

export type ListSpecialEventsResponse2 = ListSpecialEventsResponse;

export type ListSpecialEventsError = Error;

export type GetSpecialEventData = {
  path: {
    /**
     * Identifier for a special event.
     */
    eventId: string;
  };
};

export type GetSpecialEventResponse = SpecialEventResponse;

export type GetSpecialEventError = Error;

export type UpdateSpecialEventData = {
  body: UpdateSpecialEventRequest;
  path: {
    /**
     * Identifier for a special event.
     */
    eventId: string;
  };
};

export type UpdateSpecialEventResponse = SpecialEventResponse;

export type UpdateSpecialEventError = Error;

export type DeleteSpecialEventData = {
  path: {
    /**
     * Identifier for a special event.
     */
    eventId: string;
  };
};

export type DeleteSpecialEventResponse = void;

export type DeleteSpecialEventError = Error;

export type BuyMuseumTicketsData = {
  body: BuyMuseumTicketsRequest;
};

export type BuyMuseumTicketsResponse2 = BuyMuseumTicketsResponse;

export type BuyMuseumTicketsError = Error;

export type GetTicketCodeData = {
  path: {
    /**
     * Identifier for a ticket to a museum event. Used to generate ticket image.
     */
    ticketId: string;
  };
};

export type GetTicketCodeResponse2 = GetTicketCodeResponse;

export type GetTicketCodeError = Error;

export type $OpenApiTs = {
  '/museum-hours': {
    get: {
      req: GetMuseumHoursData;
      res: {
        /**
         * Success.
         */
        200: GetMuseumHoursResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
  };
  '/special-events': {
    post: {
      req: ListSpecialEventsData;
      res: {
        /**
         * Success.
         */
        200: SpecialEventResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
    get: {
      req: ListSpecialEventsData;
      res: {
        /**
         * Success.
         */
        200: ListSpecialEventsResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
  };
  '/special-events/{eventId}': {
    get: {
      req: DeleteSpecialEventData;
      res: {
        /**
         * Success.
         */
        200: SpecialEventResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
    patch: {
      req: DeleteSpecialEventData;
      res: {
        /**
         * Success.
         */
        200: SpecialEventResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteSpecialEventData;
      res: {
        /**
         * Success - no content.
         */
        204: void;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Unauthorized.
         */
        401: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
  };
  '/tickets': {
    post: {
      req: BuyMuseumTicketsData;
      res: {
        /**
         * Success.
         */
        200: BuyMuseumTicketsResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
  };
  '/tickets/{ticketId}/qr': {
    get: {
      req: GetTicketCodeData;
      res: {
        /**
         * Scannable event ticket in image format.
         */
        200: GetTicketCodeResponse;
        /**
         * Bad request.
         */
        400: Error;
        /**
         * Not found.
         */
        404: Error;
      };
    };
  };
};
