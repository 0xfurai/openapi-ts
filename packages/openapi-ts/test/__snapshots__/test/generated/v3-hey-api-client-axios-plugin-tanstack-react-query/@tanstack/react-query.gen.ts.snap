// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import { client, export_, import_, apiVVersionOdataControllerCount, getCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, deleteCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, deleteFoo, callWithDescriptions, deprecatedCall, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam, postApiVbyApiVersionRequestBody, postApiVbyApiVersionFormData, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName1, duplicateName2, duplicateName3, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, uploadFile, fileResponse, complexTypes, multipartRequest, multipartResponse, complexParams, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, putWithFormUrlEncoded } from '../services.gen';
import type { ImportData, ImportError, ImportResponse, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamError, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, UploadFileData, UploadFileError, UploadFileResponse, FileResponseData, ComplexTypesData, MultipartRequestData, ComplexParamsData, ComplexParamsError, ComplexParamsResponse, CallWithResultFromHeaderError, CallWithResultFromHeaderResponse, TestErrorCodeData, TestErrorCodeError, TestErrorCodeResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Error, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: client.getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const exportOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await export_({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("export", options)
    ]
}); };

export const importOptions = (options: Options<ImportData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await import_({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("import", options)
    ]
}); };

export const importMutation = () => { const mutationOptions: UseMutationOptions<ImportResponse, AxiosError<ImportError>, Options<ImportData>> = {
    mutationFn: async (options) => {
        const { data } = await import_({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const apiVVersionOdataControllerCountOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await apiVVersionOdataControllerCount({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("apiVVersionOdataControllerCount", options)
    ]
}); };

export const getCallWithoutParametersAndResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithoutParametersAndResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("getCallWithoutParametersAndResponse", options)
    ]
}); };

export const putCallWithoutParametersAndResponseMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await putCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const postCallWithoutParametersAndResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithoutParametersAndResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("postCallWithoutParametersAndResponse", options)
    ]
}); };

export const postCallWithoutParametersAndResponseMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await postCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteCallWithoutParametersAndResponseMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await deleteCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const patchCallWithoutParametersAndResponseMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await patchCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteFooMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<DeleteFooData3>> = {
    mutationFn: async (options) => {
        const { data } = await deleteFoo({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithDescriptionsOptions = (options?: Options<CallWithDescriptionsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDescriptions({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithDescriptions", options)
    ]
}); };

export const callWithDescriptionsMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<CallWithDescriptionsData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithDescriptions({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deprecatedCallOptions = (options: Options<DeprecatedCallData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await deprecatedCall({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("deprecatedCall", options)
    ]
}); };

export const deprecatedCallMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<DeprecatedCallData>> = {
    mutationFn: async (options) => {
        const { data } = await deprecatedCall({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithParametersOptions = (options: Options<CallWithParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithParameters({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithParameters", options)
    ]
}); };

export const callWithParametersInfiniteOptions = (options: Options<CallWithParametersData>) => { return infiniteQueryOptions<void, AxiosError<DefaultError>, InfiniteData<void>, QueryKey<Options<CallWithParametersData>>, string | Pick<QueryKey<Options<CallWithParametersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<CallWithParametersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                cursor: pageParam
            }
        };
        const { data } = await callWithParameters({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithParameters", options, true)
    ]
}); };

export const callWithParametersMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<CallWithParametersData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithWeirdParameterNamesOptions = (options: Options<CallWithWeirdParameterNamesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithWeirdParameterNames({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithWeirdParameterNames", options)
    ]
}); };

export const callWithWeirdParameterNamesMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<CallWithWeirdParameterNamesData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithWeirdParameterNames({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getCallWithOptionalParamOptions = (options: Options<GetCallWithOptionalParamData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("getCallWithOptionalParam", options)
    ]
}); };

export const getCallWithOptionalParamInfiniteOptions = (options: Options<GetCallWithOptionalParamData>) => { return infiniteQueryOptions<void, AxiosError<DefaultError>, InfiniteData<void>, QueryKey<Options<GetCallWithOptionalParamData>>, number | Pick<QueryKey<Options<GetCallWithOptionalParamData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<GetCallWithOptionalParamData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await getCallWithOptionalParam({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("getCallWithOptionalParam", options, true)
    ]
}); };

export const postCallWithOptionalParamOptions = (options: Options<PostCallWithOptionalParamData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithOptionalParam({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("postCallWithOptionalParam", options)
    ]
}); };

export const postCallWithOptionalParamInfiniteOptions = (options: Options<PostCallWithOptionalParamData>) => { return infiniteQueryOptions<PostCallWithOptionalParamResponse, AxiosError<PostCallWithOptionalParamError>, InfiniteData<PostCallWithOptionalParamResponse>, QueryKey<Options<PostCallWithOptionalParamData>>, number | Pick<QueryKey<Options<PostCallWithOptionalParamData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<PostCallWithOptionalParamData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            body: {
                offset: pageParam
            }
        };
        const { data } = await postCallWithOptionalParam({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("postCallWithOptionalParam", options, true)
    ]
}); };

export const postCallWithOptionalParamMutation = () => { const mutationOptions: UseMutationOptions<PostCallWithOptionalParamResponse, AxiosError<PostCallWithOptionalParamError>, Options<PostCallWithOptionalParamData>> = {
    mutationFn: async (options) => {
        const { data } = await postCallWithOptionalParam({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const postApiVbyApiVersionRequestBodyOptions = (options?: Options<PostApiVbyApiVersionRequestBodyData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionRequestBody({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("postApiVbyApiVersionRequestBody", options)
    ]
}); };

export const postApiVbyApiVersionRequestBodyMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<PostApiVbyApiVersionRequestBodyData>> = {
    mutationFn: async (options) => {
        const { data } = await postApiVbyApiVersionRequestBody({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const postApiVbyApiVersionFormDataOptions = (options?: Options<PostApiVbyApiVersionFormDataData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionFormData({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("postApiVbyApiVersionFormData", options)
    ]
}); };

export const postApiVbyApiVersionFormDataMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<PostApiVbyApiVersionFormDataData>> = {
    mutationFn: async (options) => {
        const { data } = await postApiVbyApiVersionFormData({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithDefaultParametersOptions = (options?: Options<CallWithDefaultParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultParameters({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithDefaultParameters", options)
    ]
}); };

export const callWithDefaultOptionalParametersOptions = (options?: Options<CallWithDefaultOptionalParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultOptionalParameters({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithDefaultOptionalParameters", options)
    ]
}); };

export const callWithDefaultOptionalParametersMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<CallWithDefaultOptionalParametersData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithDefaultOptionalParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callToTestOrderOfParamsMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<CallToTestOrderOfParamsData>> = {
    mutationFn: async (options) => {
        const { data } = await callToTestOrderOfParams({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const duplicateNameOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("duplicateName", options)
    ]
}); };

export const duplicateName1Options = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName1({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("duplicateName1", options)
    ]
}); };

export const duplicateName1Mutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName1({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const duplicateName2Mutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName2({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const duplicateName3Mutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName3({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithNoContentResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithNoContentResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithNoContentResponse", options)
    ]
}); };

export const callWithResponseAndNoContentResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponseAndNoContentResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithResponseAndNoContentResponse", options)
    ]
}); };

export const dummyAOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyA({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("dummyA", options)
    ]
}); };

export const dummyBOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyB({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("dummyB", options)
    ]
}); };

export const callWithResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithResponse", options)
    ]
}); };

export const callWithDuplicateResponsesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDuplicateResponses({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithDuplicateResponses", options)
    ]
}); };

export const callWithDuplicateResponsesMutation = () => { const mutationOptions: UseMutationOptions<CallWithDuplicateResponsesResponse, AxiosError<CallWithDuplicateResponsesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithDuplicateResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithResponsesMutation = () => { const mutationOptions: UseMutationOptions<CallWithResponsesResponse, AxiosError<CallWithResponsesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const collectionFormatOptions = (options: Options<CollectionFormatData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await collectionFormat({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("collectionFormat", options)
    ]
}); };

export const typesOptions = (options: Options<TypesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await types({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("types", options)
    ]
}); };

export const uploadFileOptions = (options: Options<UploadFileData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await uploadFile({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("uploadFile", options)
    ]
}); };

export const uploadFileMutation = () => { const mutationOptions: UseMutationOptions<UploadFileResponse, AxiosError<UploadFileError>, Options<UploadFileData>> = {
    mutationFn: async (options) => {
        const { data } = await uploadFile({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const fileResponseOptions = (options: Options<FileResponseData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fileResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("fileResponse", options)
    ]
}); };

export const complexTypesOptions = (options: Options<ComplexTypesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await complexTypes({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("complexTypes", options)
    ]
}); };

export const multipartRequestOptions = (options?: Options<MultipartRequestData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartRequest({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("multipartRequest", options)
    ]
}); };

export const multipartRequestMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<MultipartRequestData>> = {
    mutationFn: async (options) => {
        const { data } = await multipartRequest({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const multipartResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartResponse({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("multipartResponse", options)
    ]
}); };

export const complexParamsMutation = () => { const mutationOptions: UseMutationOptions<ComplexParamsResponse, AxiosError<ComplexParamsError>, Options<ComplexParamsData>> = {
    mutationFn: async (options) => {
        const { data } = await complexParams({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const callWithResultFromHeaderOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResultFromHeader({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("callWithResultFromHeader", options)
    ]
}); };

export const callWithResultFromHeaderMutation = () => { const mutationOptions: UseMutationOptions<CallWithResultFromHeaderResponse, AxiosError<CallWithResultFromHeaderError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithResultFromHeader({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const testErrorCodeOptions = (options: Options<TestErrorCodeData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await testErrorCode({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("testErrorCode", options)
    ]
}); };

export const testErrorCodeMutation = () => { const mutationOptions: UseMutationOptions<TestErrorCodeResponse, AxiosError<TestErrorCodeError>, Options<TestErrorCodeData>> = {
    mutationFn: async (options) => {
        const { data } = await testErrorCode({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const nonAsciiæøåÆøÅöôêÊ字符串Options = (options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        createQueryKey("nonAsciiæøåÆøÅöôêÊ字符串", options)
    ]
}); };

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation = () => { const mutationOptions: UseMutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, AxiosError<NonAsciiæøåÆøÅöôêÊ字符串Error>, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>> = {
    mutationFn: async (options) => {
        const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const putWithFormUrlEncodedMutation = () => { const mutationOptions: UseMutationOptions<void, AxiosError<DefaultError>, Options<PutWithFormUrlEncodedData>> = {
    mutationFn: async (options) => {
        const { data } = await putWithFormUrlEncoded({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };