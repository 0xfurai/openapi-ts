// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions } from '@tanstack/react-query';
import { export_, import_, apiVVersionOdataControllerCount, getCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, deleteCallWithoutParametersAndResponse, optionsCallWithoutParametersAndResponse, headCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, deleteFoo, callWithDescriptions, deprecatedCall, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam, postApiVbyApiVersionRequestBody, postApiVbyApiVersionFormData, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName1, duplicateName2, duplicateName3, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, uploadFile, fileResponse, complexTypes, multipartRequest, multipartResponse, complexParams, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, putWithFormUrlEncoded } from './services.gen';
import type { ImportData, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, CollectionFormatData, TypesData, UploadFileData, FileResponseData, ComplexTypesData, MultipartRequestData, ComplexParamsData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PutWithFormUrlEncodedData } from './types.gen';

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const exportOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await export_({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'export',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const importOptions = (options: Options<ImportData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await import_({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'import',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const apiVVersionOdataControllerCountOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await apiVVersionOdataControllerCount({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'apiVVersionOdataControllerCount',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const getCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'getCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const putCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await putCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'putCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const postCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'postCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const deleteCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await deleteCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'deleteCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const optionsCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await optionsCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'optionsCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const headCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await headCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'headCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const patchCallWithoutParametersAndResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await patchCallWithoutParametersAndResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'patchCallWithoutParametersAndResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const deleteFooOptions = (options: Options<DeleteFooData3>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await deleteFoo({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'deleteFoo',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithDescriptionsOptions = (options?: Options<CallWithDescriptionsData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDescriptions({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithDescriptions',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const deprecatedCallOptions = (options: Options<DeprecatedCallData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await deprecatedCall({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'deprecatedCall',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithParametersOptions = (options: Options<CallWithParametersData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithParameters({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithParameters',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithWeirdParameterNamesOptions = (options: Options<CallWithWeirdParameterNamesData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithWeirdParameterNames({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithWeirdParameterNames',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const getCallWithOptionalParamOptions = (options: Options<GetCallWithOptionalParamData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithOptionalParam({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'getCallWithOptionalParam',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const postCallWithOptionalParamOptions = (options: Options<PostCallWithOptionalParamData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithOptionalParam({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'postCallWithOptionalParam',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const postApiVbyApiVersionRequestBodyOptions = (options?: Options<PostApiVbyApiVersionRequestBodyData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionRequestBody({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'postApiVbyApiVersionRequestBody',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const postApiVbyApiVersionFormDataOptions = (options?: Options<PostApiVbyApiVersionFormDataData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionFormData({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'postApiVbyApiVersionFormData',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithDefaultParametersOptions = (options?: Options<CallWithDefaultParametersData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultParameters({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithDefaultParameters',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithDefaultOptionalParametersOptions = (options?: Options<CallWithDefaultOptionalParametersData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultOptionalParameters({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithDefaultOptionalParameters',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callToTestOrderOfParamsOptions = (options: Options<CallToTestOrderOfParamsData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callToTestOrderOfParams({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callToTestOrderOfParams',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const duplicateNameOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'duplicateName',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const duplicateName1Options = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName1({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'duplicateName1',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const duplicateName2Options = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName2({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'duplicateName2',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const duplicateName3Options = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName3({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'duplicateName3',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithNoContentResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithNoContentResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithNoContentResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithResponseAndNoContentResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponseAndNoContentResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithResponseAndNoContentResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const dummyAOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyA({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'dummyA',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const dummyBOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyB({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'dummyB',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithDuplicateResponsesOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDuplicateResponses({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithDuplicateResponses',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithResponsesOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponses({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithResponses',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const collectionFormatOptions = (options: Options<CollectionFormatData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await collectionFormat({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'collectionFormat',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const typesOptions = (options: Options<TypesData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await types({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'types',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const uploadFileOptions = (options: Options<UploadFileData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await uploadFile({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'uploadFile',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const fileResponseOptions = (options: Options<FileResponseData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await fileResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'fileResponse',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const complexTypesOptions = (options: Options<ComplexTypesData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await complexTypes({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'complexTypes',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const multipartRequestOptions = (options?: Options<MultipartRequestData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartRequest({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'multipartRequest',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const multipartResponseOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartResponse({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'multipartResponse',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const complexParamsOptions = (options: Options<ComplexParamsData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await complexParams({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'complexParams',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const callWithResultFromHeaderOptions = (options?: Options, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResultFromHeader({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'callWithResultFromHeader',
            params: {
                body: options?.body,
                headers: options?.headers,
                path: options?.path,
                query: options?.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const testErrorCodeOptions = (options: Options<TestErrorCodeData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await testErrorCode({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'testErrorCode',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const nonAsciiæøåÆøÅöôêÊ字符串Options = (options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'nonAsciiæøåÆøÅöôêÊ字符串',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };

/**
 * TODO: describe arguments, options is Hey API, queryOpts is TanStack Query
 */
export const putWithFormUrlEncodedOptions = (options: Options<PutWithFormUrlEncodedData>, queryOpts?: object) => { return queryOptions({
    ...queryOpts,
    queryFn: async ({ queryKey }) => {
        const { data } = await putWithFormUrlEncoded({
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            scope: 'putWithFormUrlEncoded',
            params: {
                body: options.body,
                headers: options.headers,
                path: options.path,
                query: options.query
            }
        }
    ]
}); };