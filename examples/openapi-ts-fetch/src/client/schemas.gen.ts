// This file is auto-generated by @hey-api/openapi-ts

export const $TicketType = {
  description:
    'Type of ticket being purchased. Use `general` for regular museum entry and `event` for tickets to special events.',
  enum: ['event', 'general'],
  example: 'event',
  type: 'string',
} as const;

export const $Date = {
  example: '2023-10-29',
  format: 'date',
  type: 'string',
} as const;

export const $Email = {
  description: 'Email address for ticket purchaser.',
  example: 'museum-lover@example.com',
  format: 'email',
  type: 'string',
} as const;

export const $Phone = {
  description: 'Phone number for the ticket purchaser (optional).',
  example: '+1(234)-567-8910',
  type: 'string',
} as const;

export const $BuyMuseumTicketsRequest = {
  description: 'Request payload used for purchasing museum tickets.',
  properties: {
    email: {
      $ref: '#/components/schemas/Email',
    },
    eventId: {
      $ref: '#/components/schemas/EventId',
      description:
        "Unique identifier for a special event. Required if purchasing tickets for the museum's special events.",
    },
    phone: {
      $ref: '#/components/schemas/Phone',
    },
    ticketDate: {
      $ref: '#/components/schemas/Date',
      description: 'Date that the ticket is valid for.',
    },
    ticketType: {
      $ref: '#/components/schemas/TicketType',
    },
  },
  required: ['ticketType', 'ticketDate', 'email'],
  type: 'object',
} as const;

export const $TicketMessage = {
  description: 'Confirmation message after a ticket purchase.',
  example: 'Museum general entry ticket purchased',
  type: 'string',
} as const;

export const $TicketId = {
  description: 'Unique identifier for museum ticket. Generated when purchased.',
  example: 'a54a57ca-36f8-421b-a6b4-2e8f26858a4c',
  format: 'uuid',
  type: 'string',
} as const;

export const $TicketConfirmation = {
  description: 'Unique confirmation code used to verify ticket purchase.',
  example: 'ticket-event-a98c8f-7eb12',
  type: 'string',
} as const;

export const $BuyMuseumTicketsResponse = {
  description: 'Details for a museum ticket after a successful purchase.',
  properties: {
    confirmationCode: {
      $ref: '#/components/schemas/TicketConfirmation',
    },
    eventName: {
      $ref: '#/components/schemas/EventName',
    },
    message: {
      $ref: '#/components/schemas/TicketMessage',
    },
    ticketDate: {
      $ref: '#/components/schemas/Date',
      description: 'Date the ticket is valid for.',
    },
    ticketId: {
      $ref: '#/components/schemas/TicketId',
    },
    ticketType: {
      $ref: '#/components/schemas/TicketType',
    },
  },
  required: [
    'message',
    'ticketId',
    'ticketType',
    'ticketDate',
    'confirmationCode',
  ],
  type: 'object',
} as const;

export const $GetTicketCodeResponse = {
  description:
    'Image of a ticket with a QR code used for museum or event entry.',
  format: 'binary',
  type: 'string',
} as const;

export const $GetMuseumHoursResponse = {
  description: 'List of museum operating hours for consecutive days.',
  items: {
    $ref: '#/components/schemas/MuseumDailyHours',
  },
  type: 'array',
} as const;

export const $MuseumDailyHours = {
  description: 'Daily operating hours for the museum.',
  properties: {
    date: {
      $ref: '#/components/schemas/Date',
      description: 'Date the operating hours apply to.',
      example: '2024-12-31',
    },
    timeClose: {
      description:
        'Time the museum closes on a specific date. Uses 24 hour time format (`HH:mm`).',
      example: '18:00',
      pattern: '^([01]\\d|2[0-3]):?([0-5]\\d)$',
      type: 'string',
    },
    timeOpen: {
      description:
        'Time the museum opens on a specific date. Uses 24 hour time format (`HH:mm`).',
      example: '09:00',
      pattern: '^([01]\\d|2[0-3]):?([0-5]\\d)$',
      type: 'string',
    },
  },
  required: ['date', 'timeOpen', 'timeClose'],
  type: 'object',
} as const;

export const $EventId = {
  description: 'Identifier for a special event.',
  example: '3be6453c-03eb-4357-ae5a-984a0e574a54',
  format: 'uuid',
  type: 'string',
} as const;

export const $EventName = {
  description: 'Name of the special event.',
  example: 'Pirate Coding Workshop',
  type: 'string',
} as const;

export const $EventLocation = {
  description: 'Location where the special event is held.',
  example: 'Computer Room',
  type: 'string',
} as const;

export const $EventDescription = {
  description: 'Description of the special event.',
  example:
    'Captain Blackbeard shares his love of the C...language. And possibly Arrrrr (R lang).',
  type: 'string',
} as const;

export const $EventDates = {
  description: 'List of planned dates for the special event.',
  items: {
    $ref: '#/components/schemas/Date',
  },
  type: 'array',
} as const;

export const $EventPrice = {
  description: 'Price of a ticket for the special event.',
  example: 25,
  format: 'float',
  type: 'number',
} as const;

export const $CreateSpecialEventRequest = {
  description: 'Request payload for creating new special events at the museum.',
  properties: {
    dates: {
      $ref: '#/components/schemas/EventDates',
    },
    eventDescription: {
      $ref: '#/components/schemas/EventDescription',
    },
    location: {
      $ref: '#/components/schemas/EventLocation',
    },
    name: {
      $ref: '#/components/schemas/EventName',
    },
    price: {
      $ref: '#/components/schemas/EventPrice',
    },
  },
  required: ['name', 'location', 'eventDescription', 'dates', 'price'],
  type: 'object',
} as const;

export const $UpdateSpecialEventRequest = {
  description:
    'Request payload for updating an existing special event. Only included fields are updated in the event.',
  properties: {
    dates: {
      $ref: '#/components/schemas/EventDates',
    },
    eventDescription: {
      $ref: '#/components/schemas/EventDescription',
    },
    location: {
      $ref: '#/components/schemas/EventLocation',
    },
    name: {
      $ref: '#/components/schemas/EventName',
    },
    price: {
      $ref: '#/components/schemas/EventPrice',
    },
  },
  type: 'object',
} as const;

export const $ListSpecialEventsResponse = {
  description: 'List of upcoming special events.',
  items: {
    $ref: '#/components/schemas/SpecialEventResponse',
  },
  type: 'array',
} as const;

export const $SpecialEventResponse = {
  description: 'Information about a special event.',
  properties: {
    dates: {
      $ref: '#/components/schemas/EventDates',
    },
    eventDescription: {
      $ref: '#/components/schemas/EventDescription',
    },
    eventId: {
      $ref: '#/components/schemas/EventId',
    },
    location: {
      $ref: '#/components/schemas/EventLocation',
    },
    name: {
      $ref: '#/components/schemas/EventName',
    },
    price: {
      $ref: '#/components/schemas/EventPrice',
    },
  },
  required: [
    'eventId',
    'name',
    'location',
    'eventDescription',
    'dates',
    'price',
  ],
  type: 'object',
} as const;

export const $Error = {
  properties: {
    title: {
      example: 'Validation failed',
      type: 'string',
    },
    type: {
      example: 'object',
      type: 'string',
    },
  },
  type: 'object',
} as const;
