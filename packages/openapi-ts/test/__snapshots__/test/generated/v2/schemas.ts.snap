export const $CommentWithBreaks = {
    type: 'number',
    description: `Testing multiline comments in string: First line
Second line

Fourth line`,
} as const;

export const $CommentWithBackticks = {
    type: 'number',
    description: `Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work`,
} as const;

export const $CommentWithSlashes = {
    type: 'number',
    description: `Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work`,
} as const;

export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: `Testing expression placeholders in string: \${expression} should work`,
} as const;

export const $CommentWithQuotes = {
    type: 'number',
    description: `Testing quotes in string: 'single quote''' and "double quotes""" should work`,
} as const;

export const $CommentWithReservedCharacters = {
    type: 'number',
    description: `Testing reserved characters in string: /* inline */ and /** inline **/ should work`,
} as const;

export const $SimpleInteger = {
    type: 'number',
    description: `This is a simple number`,
} as const;

export const $SimpleBoolean = {
    type: 'boolean',
    description: `This is a simple boolean`,
} as const;

export const $SimpleString = {
    type: 'string',
    description: `This is a simple string`,
} as const;

export const $NonAsciiStringæøåÆØÅöôêÊ字符串 = {
    type: 'string',
    description: `A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)`,
} as const;

export const $SimpleFile = {
    type: 'binary',
    description: `This is a simple file`,
} as const;

export const $SimpleReference = {
    type: 'ModelWithString',
    description: `This is a simple reference`,
} as const;

export const $SimpleStringWithPattern = {
    type: 'string',
    description: `This is a simple string`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;

export const $EnumWithStrings = {
    type: 'Enum',
    enum: ['Success', 'Warning', 'Error', "'Single Quote'", '"Double Quotes"', 'Non-ascii: øæåôöØÆÅÔÖ字符串'],
} as const;

export const $EnumWithNumbers = {
    type: 'Enum',
    enum: [1, 2, 3, 1.1, 1.2, 1.3, 100, 200, 300, -100, -200, -300, -1.1, -1.2, -1.3],
} as const;

export const $EnumFromDescription = {
    type: 'number',
    description: `Success=1,Warning=2,Error=3`,
} as const;

export const $EnumWithExtensions = {
    type: 'Enum',
    enum: [200, 400, 500],
} as const;

export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;

export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;

export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;

export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;

export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;

export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;

export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;

export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;

export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;

export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;

export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;

export const $Date = {
    type: 'string',
    description: `This is a type-only model that defines Date as a string`,
} as const;

export const $ModelWithInteger = {
    description: `This is a model with one number property`,
    properties: {
        prop: {
            type: 'number',
            description: `This is a simple number property`,
        },
    },
} as const;

export const $ModelWithBoolean = {
    description: `This is a model with one boolean property`,
    properties: {
        prop: {
            type: 'boolean',
            description: `This is a simple boolean property`,
        },
    },
} as const;

export const $ModelWithString = {
    description: `This is a model with one string property`,
    properties: {
        prop: {
            type: 'string',
            description: `This is a simple string property`,
        },
    },
} as const;

export const $ModelWithNullableString = {
    description: `This is a model with one string property`,
    properties: {
        nullableProp: {
            type: 'string',
            description: `This is a simple string property`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: `This is a simple string property`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;

export const $ModelWithEnum = {
    description: `This is a model with one enum`,
    properties: {
        test: {
            type: 'Enum',
            enum: ['Success', 'Warning', 'Error', 'ØÆÅ字符串'],
        },
        statusCode: {
            type: 'Enum',
            enum: ['100', '200 FOO', '300 FOO_BAR', '400 foo-bar', '500 foo.bar', '600 foo&bar'],
        },
        bool: {
            type: 'boolean',
            description: `Simple boolean enum`,
        },
    },
} as const;

export const $ModelWithEnumFromDescription = {
    description: `This is a model with one enum`,
    properties: {
        test: {
            type: 'number',
            description: `Success=1,Warning=2,Error=3`,
        },
    },
} as const;

export const $ModelWithNestedEnums = {
    description: `This is a model with nested enums`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
                enum: ['Success', 'Warning', 'Error'],
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: `Success=1,Warning=2,Error=3`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
                enum: ['Success', 'Warning', 'Error'],
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: `Success=1,Warning=2,Error=3`,
            },
        },
    },
} as const;

export const $ModelWithReference = {
    description: `This is a model with one property containing a reference`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;

export const $ModelWithArray = {
    description: `This is a model with one property containing an array`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;

export const $ModelWithDictionary = {
    description: `This is a model with one property containing a dictionary`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;

export const $ModelWithCircularReference = {
    description: `This is a model with one property containing a circular reference`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;

export const $ModelWithProperties = {
    description: `This is a model with one nested property`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;

export const $ModelWithNestedProperties = {
    description: `This is a model with one nested property`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;

export const $ModelWithDuplicateProperties = {
    description: `This is a model with duplicated properties`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;

export const $ModelWithOrderedProperties = {
    description: `This is a model with ordered properties`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;

export const $ModelWithDuplicateImports = {
    description: `This is a model with duplicated imports`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;

export const $ModelThatExtends = {
    type: 'all-of',
    description: `This is a model that extends another model`,
    contains: [
        {
            type: 'ModelWithString',
        },
        {
            properties: {
                propExtendsA: {
                    type: 'string',
                },
                propExtendsB: {
                    type: 'ModelWithString',
                },
            },
        },
    ],
} as const;

export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: `This is a model that extends another model`,
    contains: [
        {
            type: 'ModelWithString',
        },
        {
            type: 'ModelThatExtends',
        },
        {
            properties: {
                propExtendsC: {
                    type: 'string',
                },
                propExtendsD: {
                    type: 'ModelWithString',
                },
            },
        },
    ],
} as const;

export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;

export const $ModelWithPattern = {
    description: `This is a model that contains a some patterns`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\d{2}-\\d{3}-\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: "^[a-zA-Z0-9']*$",
        },
        patternWithNewline: {
            type: 'string',
            pattern: 'aaa\nbbb',
        },
        patternWithBacktick: {
            type: 'string',
            pattern: 'aaa`bbb',
        },
    },
} as const;
