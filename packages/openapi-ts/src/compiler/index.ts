import { type PathLike, rmSync, writeFileSync } from 'node:fs';
import path from 'node:path';

import ts from 'typescript';

import { ensureDirSync } from '../generate/utils';
import * as classes from './classes';
import * as convert from './convert';
import * as module from './module';
import * as _return from './return';
import * as transform from './transform';
import * as typedef from './typedef';
import * as types from './types';
import * as utils from './utils';

export type { Property } from './typedef';
export type { FunctionParameter } from './types';
export type { Comments } from './utils';
export type { ClassElement, Node, TypeNode } from 'typescript';

const splitNameAndExtension = (fileName: string) => {
  const match = fileName.match(/\.[0-9a-z]+$/i);
  const extension = match ? match[0].slice(1) : '';
  const name = fileName.slice(
    0,
    fileName.length - (extension ? extension.length + 1 : 0),
  );
  return { extension, name };
};

export class TypeScriptFile {
  private _headers: Array<string> = [];
  private _imports: Array<ts.Node> = [];
  private _items: Array<ts.Node | string> = [];
  private _name: string;
  private _path: PathLike;

  public constructor({
    dir,
    name,
    header = true,
  }: {
    dir: string;
    header?: boolean;
    name: string;
  }) {
    this._name = this._setName(name);
    this._path = path.resolve(dir, this.getName());

    if (header) {
      this._headers = [
        ...this._headers,
        '// This file is auto-generated by @hey-api/openapi-ts',
      ];
    }
  }

  public add(...nodes: Array<ts.Node | string>) {
    this._items = [...this._items, ...nodes];
  }

  public addImport(
    ...params: Parameters<typeof compiler.namedImportDeclarations>
  ) {
    this._imports = [
      ...this._imports,
      compiler.namedImportDeclarations(...params),
    ];
  }

  public getName(withExtension = true) {
    if (withExtension) {
      return this._name;
    }

    const { name } = splitNameAndExtension(this._name);
    return name;
  }

  public isEmpty() {
    return !this._items.length;
  }

  public remove(options?: Parameters<typeof rmSync>[1]) {
    rmSync(this._path, options);
  }

  /**
   * Removes last node form the stack. Works as undo.
   */
  public removeNode() {
    this._items = this._items.slice(0, this._items.length - 1);
  }

  private _setName(fileName: string) {
    if (fileName.includes('index')) {
      return fileName;
    }

    const { extension, name } = splitNameAndExtension(fileName);
    return [name, 'gen', extension].filter(Boolean).join('.');
  }

  public toString(seperator: string = '\n') {
    let output: string[] = [];
    if (this._headers.length) {
      output = [...output, this._headers.join('\n')];
    }
    if (this._imports.length) {
      output = [
        ...output,
        this._imports.map((node) => utils.tsNodeToString({ node })).join('\n'),
      ];
    }
    output = [
      ...output,
      ...this._items.map((node) =>
        typeof node === 'string'
          ? node
          : utils.tsNodeToString({ node, unescape: true }),
      ),
    ];
    return output.join(seperator);
  }

  public write(seperator = '\n') {
    if (this.isEmpty()) {
      this.remove({ force: true });
      return;
    }

    let dir = this._path;
    if (typeof this._path === 'string') {
      const parts = this._path.split(path.sep);
      dir = parts.slice(0, parts.length - 1).join(path.sep);
    }
    ensureDirSync(dir);
    writeFileSync(this._path, this.toString(seperator));
  }
}

export const compiler = {
  arrayLiteralExpression: types.createArrayLiteralExpression,
  arrowFunction: types.createArrowFunction,
  awaitExpression: types.createAwaitExpression,
  binaryExpression: transform.createBinaryExpression,
  callExpression: module.createCallExpression,
  classDeclaration: classes.createClassDeclaration,
  constVariable: module.createConstVariable,
  constructorDeclaration: classes.createConstructorDeclaration,
  elementAccessExpression: transform.createElementAccessExpression,
  enumDeclaration: types.createEnumDeclaration,
  exportAllDeclaration: module.createExportAllDeclaration,
  exportNamedDeclaration: module.createNamedExportDeclarations,
  expressionToStatement: convert.expressionToStatement,
  identifier: utils.createIdentifier,
  ifStatement: transform.createIfStatement,
  isTsNode: utils.isTsNode,
  keywordTypeNode: types.createKeywordTypeNode,
  methodDeclaration: classes.createMethodDeclaration,
  namedImportDeclarations: module.createNamedImportDeclarations,
  namespaceDeclaration: types.createNamespaceDeclaration,
  nodeToString: utils.tsNodeToString,
  objectExpression: types.createObjectType,
  ots: utils.ots,
  propertyAccessExpression: types.createPropertyAccessExpression,
  propertyAccessExpressions: transform.createPropertyAccessExpressions,
  returnFunctionCall: _return.createReturnFunctionCall,
  returnVariable: _return.createReturnVariable,
  safeAccessExpression: transform.createSafeAccessExpression,
  stringToTsNodes: utils.stringToTsNodes,
  transformArrayMap: transform.createArrayMapTransform,
  transformArrayMutation: transform.createArrayTransformMutation,
  transformDateMutation: transform.createDateTransformMutation,
  transformFunctionMutation: transform.createFunctionTransformMutation,
  transformNewDate: transform.createDateTransformerExpression,
  typeAliasDeclaration: typedef.createTypeAliasDeclaration,
  typeArrayNode: typedef.createTypeArrayNode,
  typeInterfaceNode: typedef.createTypeInterfaceNode,
  typeIntersectNode: typedef.createTypeIntersectNode,
  typeNode: typedef.createTypeNode,
  typeRecordNode: typedef.createTypeRecordNode,
  typeTupleNode: typedef.createTypeTupleNode,
  typeUnionNode: typedef.createTypeUnionNode,
};
