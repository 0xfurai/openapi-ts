import type { ModelWithArrayReadOnlyAndWriteOnly } from '../models';
import type { ModelWithReadOnlyAndWriteOnly } from '../models';
import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';

export type TDataPostServiceWithEmptyTag = {
    requestBody: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;
};

export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public serviceWithEmptyTag(): CancelablePromise<void> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public postServiceWithEmptyTag(
        data: TDataPostServiceWithEmptyTag
    ): CancelablePromise<ModelWithReadOnlyAndWriteOnly> {
        const { requestBody } = data;
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v{api-version}/no-tag',
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}
