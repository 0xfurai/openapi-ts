import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';

import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TDataTypes = {
    /**
     * This is a number parameter
     */
    id?: number;
    /**
     * This is an array parameter
     */
    parameterArray: Array<string> | null;
    /**
     * This is a boolean parameter
     */
    parameterBoolean?: boolean | null;
    /**
     * This is a dictionary parameter
     */
    parameterDictionary: Record<string, unknown> | null;
    /**
     * This is an enum parameter
     */
    parameterEnum: 'Success' | 'Warning' | 'Error' | null;
    /**
     * This is a number parameter
     */
    parameterNumber?: number;
    /**
     * This is an object parameter
     */
    parameterObject?: Record<string, unknown> | null;
    /**
     * This is a string parameter
     */
    parameterString?: string | null;
};

@Injectable({
    providedIn: 'root',
})
export class TypesService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public types(data: TDataTypes): Observable<number | string | boolean | Record<string, unknown>> {
        const {
            id,
            parameterArray,
            parameterBoolean = true,
            parameterDictionary,
            parameterEnum,
            parameterNumber = 123,
            parameterObject = null,
            parameterString = 'default',
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id,
            },
            query: {
                parameterNumber,
                parameterString,
                parameterBoolean,
                parameterObject,
                parameterArray,
                parameterDictionary,
                parameterEnum,
            },
        });
    }
}
