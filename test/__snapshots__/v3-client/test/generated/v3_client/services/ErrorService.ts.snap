import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';

export type TDataTestErrorCode = {
    /**
     * Status code to return
     */
    status: number;
};

export class ErrorService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(data: TDataTestErrorCode): CancelablePromise<any> {
        const { status } = data;
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}
