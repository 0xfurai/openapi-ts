import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
    $OpenApiTsDefault,
    $OpenApiTsSimple,
    $OpenApiTsDescriptions,
    $OpenApiTsParameters,
    $OpenApiTsDefaults,
    $OpenApiTsDuplicate,
    $OpenApiTsNoContent,
    $OpenApiTsResponse,
    $OpenApiTsMultipleTags1,
    $OpenApiTsMultipleTags2,
    $OpenApiTsMultipleTags3,
    $OpenApiTsCollectionFormat,
    $OpenApiTsTypes,
    $OpenApiTsComplex,
    $OpenApiTsHeader,
    $OpenApiTsError,
    $OpenApiTsNonAsciiÆøåÆøÅöôêÊ,
} from './models';

export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<$OpenApiTsDefault['res']['ServiceWithEmptyTag']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}

export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['GetCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['PutCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['PostCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['DeleteCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['OptionsCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['HeadCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<
        $OpenApiTsSimple['res']['PatchCallWithoutParametersAndResponse']
    > {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

export class DescriptionsService {
    /**
     * @throws ApiError
     */
    public static callWithDescriptions(
        data: $OpenApiTsDescriptions['req']['CallWithDescriptions'] = {}
    ): CancelablePromise<$OpenApiTsDescriptions['res']['CallWithDescriptions']> {
        const {
            parameterWithBreaks,
            parameterWithBackticks,
            parameterWithSlashes,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks,
                parameterWithBackticks,
                parameterWithSlashes,
                parameterWithExpressionPlaceholders,
                parameterWithQuotes,
                parameterWithReservedCharacters,
            },
        });
    }
}

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static callWithParameters(
        data: $OpenApiTsParameters['req']['CallWithParameters']
    ): CancelablePromise<$OpenApiTsParameters['res']['CallWithParameters']> {
        const { parameterHeader, parameterQuery, parameterForm, parameterBody, parameterPath } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            headers: {
                parameterHeader,
            },
            query: {
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: parameterBody,
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        data: $OpenApiTsParameters['req']['CallWithWeirdParameterNames']
    ): CancelablePromise<$OpenApiTsParameters['res']['CallWithWeirdParameterNames']> {
        const {
            parameterHeader,
            parameterQuery,
            parameterForm,
            parameterBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            _default,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: parameterBody,
        });
    }
}

export class DefaultsService {
    /**
     * @throws ApiError
     */
    public static callWithDefaultParameters(
        data: $OpenApiTsDefaults['req']['CallWithDefaultParameters']
    ): CancelablePromise<$OpenApiTsDefaults['res']['CallWithDefaultParameters']> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        data: $OpenApiTsDefaults['req']['CallWithDefaultOptionalParameters'] = {}
    ): CancelablePromise<$OpenApiTsDefaults['res']['CallWithDefaultOptionalParameters']> {
        const { parameterString, parameterNumber, parameterBoolean, parameterEnum, parameterModel } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callToTestOrderOfParams(
        data: $OpenApiTsDefaults['req']['CallToTestOrderOfParams']
    ): CancelablePromise<$OpenApiTsDefaults['res']['CallToTestOrderOfParams']> {
        const {
            parameterStringWithNoDefault,
            parameterOptionalStringWithDefault,
            parameterOptionalStringWithEmptyDefault,
            parameterOptionalStringWithNoDefault,
            parameterStringWithDefault,
            parameterStringWithEmptyDefault,
            parameterStringNullableWithNoDefault,
            parameterStringNullableWithDefault,
        } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault,
                parameterOptionalStringWithEmptyDefault,
                parameterOptionalStringWithNoDefault,
                parameterStringWithDefault,
                parameterStringWithEmptyDefault,
                parameterStringWithNoDefault,
                parameterStringNullableWithNoDefault,
                parameterStringNullableWithDefault,
            },
        });
    }
}

export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<$OpenApiTsDuplicate['res']['DuplicateName']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<$OpenApiTsDuplicate['res']['DuplicateName1']> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<$OpenApiTsDuplicate['res']['DuplicateName2']> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<$OpenApiTsDuplicate['res']['DuplicateName3']> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

export class NoContentService {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<
        $OpenApiTsNoContent['res']['CallWithNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns any Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<
        $OpenApiTsNoContent['res']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

export class ResponseService {
    /**
     * @returns any Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<
        $OpenApiTsResponse['res']['CallWithResponseAndNoContentResponse']
    > {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<$OpenApiTsResponse['res']['CallWithResponse']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<
        $OpenApiTsResponse['res']['CallWithDuplicateResponses']
    > {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<$OpenApiTsResponse['res']['CallWithResponses']> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

export class MultipleTags1Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<$OpenApiTsMultipleTags1['res']['DummyA']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<$OpenApiTsMultipleTags1['res']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags2Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<$OpenApiTsMultipleTags2['res']['DummyA']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<$OpenApiTsMultipleTags2['res']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags3Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<$OpenApiTsMultipleTags3['res']['DummyB']> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class CollectionFormatService {
    /**
     * @throws ApiError
     */
    public static collectionFormat(
        data: $OpenApiTsCollectionFormat['req']['CollectionFormat']
    ): CancelablePromise<$OpenApiTsCollectionFormat['res']['CollectionFormat']> {
        const { parameterArrayCsv, parameterArraySsv, parameterArrayTsv, parameterArrayPipes, parameterArrayMulti } =
            data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                parameterArrayCSV: parameterArrayCsv,
                parameterArraySSV: parameterArraySsv,
                parameterArrayTSV: parameterArrayTsv,
                parameterArrayPipes,
                parameterArrayMulti,
            },
        });
    }
}

export class TypesService {
    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(data: $OpenApiTsTypes['req']['Types']): CancelablePromise<$OpenApiTsTypes['res']['Types']> {
        const {
            parameterArray,
            parameterDictionary,
            parameterEnum,
            parameterNumber,
            parameterString,
            parameterBoolean,
            parameterObject,
            id,
        } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id,
            },
            query: {
                parameterNumber,
                parameterString,
                parameterBoolean,
                parameterObject,
                parameterArray,
                parameterDictionary,
                parameterEnum,
            },
        });
    }
}

export class ComplexService {
    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(
        data: $OpenApiTsComplex['req']['ComplexTypes']
    ): CancelablePromise<$OpenApiTsComplex['res']['ComplexTypes']> {
        const { parameterObject, parameterReference } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                parameterObject,
                parameterReference,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<$OpenApiTsHeader['res']['CallWithResultFromHeader']> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class ErrorService {
    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(
        data: $OpenApiTsError['req']['TestErrorCode']
    ): CancelablePromise<$OpenApiTsError['res']['TestErrorCode']> {
        const { status } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

export class NonAsciiÆøåÆøÅöôêÊService {
    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public static nonAsciiæøåÆøÅöôêÊ字符串(
        data: $OpenApiTsNonAsciiÆøåÆøÅöôêÊ['req']['NonAsciiæøåÆøÅöôêÊ字符串']
    ): CancelablePromise<$OpenApiTsNonAsciiÆøåÆøÅöôêÊ['res']['NonAsciiæøåÆøÅöôêÊ字符串']> {
        const { nonAsciiParamæøåÆøÅöôêÊ } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
            },
        });
    }
}
