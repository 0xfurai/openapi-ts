import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TDataCallWithParameters = {
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string;
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string;
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string;
    /**
     * This is the parameter that goes into the query params
     */
    parameterQuery: string;
};
export type TDataCallWithWeirdParameterNames = {
    /**
     * This is the parameter with a reserved keyword
     */
    _default?: string;
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string;
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string;
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string;
    /**
     * This is the parameter that goes into the request query params
     */
    parameterQuery: string;
};

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static callWithParameters(data: TDataCallWithParameters): CancelablePromise<void> {
        const { parameterBody, parameterForm, parameterHeader, parameterPath, parameterQuery } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            headers: {
                parameterHeader,
            },
            query: {
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: parameterBody,
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(data: TDataCallWithWeirdParameterNames): CancelablePromise<void> {
        const {
            _default,
            parameterBody,
            parameterForm,
            parameterHeader,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            parameterQuery,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: parameterBody,
        });
    }
}
