// This file is auto-generated by @hey-api/openapi-ts

export const $CommentWithBreaks = {
  type: 'integer',
} as const;

export const $CommentWithBackticks = {
  type: 'integer',
} as const;

export const $CommentWithBackticksAndQuotes = {
  type: 'integer',
} as const;

export const $CommentWithSlashes = {
  type: 'integer',
} as const;

export const $CommentWithExpressionPlaceholders = {
  type: 'integer',
} as const;

export const $CommentWithQuotes = {
  type: 'integer',
} as const;

export const $CommentWithReservedCharacters = {
  type: 'integer',
} as const;

export const $SimpleInteger = {
  type: 'integer',
} as const;

export const $SimpleBoolean = {
  type: 'boolean',
} as const;

export const $SimpleString = {
  type: 'string',
} as const;

export const $NonAsciiStringæøåÆØÅöôêÊ字符串 = {
  type: 'string',
} as const;

export const $SimpleFile = {
  type: 'file',
} as const;

export const $SimpleReference = {
  $ref: '#/definitions/ModelWithString',
} as const;

export const $SimpleStringWithPattern = {
  type: 'string',
  maxLength: 64,
  pattern: '^[a-zA-Z0-9_]*$',
} as const;

export const $EnumWithStrings = {
  enum: [
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串',
  ],
} as const;

export const $EnumWithNumbers = {
  enum: [
    1, 2, 3, 1.1, 1.2, 1.3, 100, 200, 300, -100, -200, -300, -1.1, -1.2, -1.3,
  ],
} as const;

export const $EnumFromDescription = {
  type: 'number',
} as const;

export const $EnumWithExtensions = {
  enum: [200, 400, 500],
} as const;

export const $ArrayWithNumbers = {
  type: 'array',
  items: {
    type: 'integer',
  },
} as const;

export const $ArrayWithBooleans = {
  type: 'array',
  items: {
    type: 'boolean',
  },
} as const;

export const $ArrayWithStrings = {
  type: 'array',
  items: {
    type: 'string',
  },
} as const;

export const $ArrayWithReferences = {
  type: 'array',
  items: {
    $ref: '#/definitions/ModelWithString',
  },
} as const;

export const $ArrayWithArray = {
  type: 'array',
  items: {
    type: 'array',
    items: {
      $ref: '#/definitions/ModelWithString',
    },
  },
} as const;

export const $ArrayWithProperties = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      foo: {
        type: 'string',
      },
      bar: {
        type: 'string',
      },
    },
  },
} as const;

export const $DictionaryWithString = {
  type: 'object',
  additionalProperties: {
    type: 'string',
  },
} as const;

export const $DictionaryWithReference = {
  type: 'object',
  additionalProperties: {
    $ref: '#/definitions/ModelWithString',
  },
} as const;

export const $DictionaryWithArray = {
  type: 'object',
  additionalProperties: {
    type: 'array',
    items: {
      $ref: '#/definitions/ModelWithString',
    },
  },
} as const;

export const $DictionaryWithDictionary = {
  type: 'object',
  additionalProperties: {
    type: 'object',
    additionalProperties: {
      type: 'string',
    },
  },
} as const;

export const $DictionaryWithProperties = {
  type: 'object',
  additionalProperties: {
    type: 'object',
    properties: {
      foo: {
        type: 'string',
      },
      bar: {
        type: 'string',
      },
    },
  },
} as const;

export const $Date = {
  type: 'string',
} as const;

export const $ModelWithInteger = {
  type: 'object',
  properties: {
    prop: {
      type: 'integer',
    },
  },
} as const;

export const $ModelWithBoolean = {
  type: 'object',
  properties: {
    prop: {
      type: 'boolean',
    },
  },
} as const;

export const $ModelWithString = {
  type: 'object',
  properties: {
    prop: {
      type: 'string',
    },
  },
} as const;

export const $ModelWithNullableString = {
  type: 'object',
  required: ['nullableRequiredProp'],
  properties: {
    nullableProp: {
      type: 'string',
      'x-nullable': true,
    },
    nullableRequiredProp: {
      type: 'string',
      'x-nullable': true,
    },
  },
} as const;

export const $ModelWithEnum = {
  type: 'object',
  properties: {
    test: {
      enum: ['Success', 'Warning', 'Error', 'ØÆÅ字符串'],
    },
    statusCode: {
      enum: [
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar',
      ],
    },
    bool: {
      type: 'boolean',
      enum: [true],
    },
  },
} as const;

export const $ModelWithEnumFromDescription = {
  type: 'object',
  properties: {
    test: {
      type: 'integer',
    },
  },
} as const;

export const $ModelWithNestedEnums = {
  type: 'object',
  properties: {
    dictionaryWithEnum: {
      type: 'object',
      additionalProperties: {
        enum: ['Success', 'Warning', 'Error'],
      },
    },
    dictionaryWithEnumFromDescription: {
      type: 'object',
      additionalProperties: {
        type: 'integer',
      },
    },
    arrayWithEnum: {
      type: 'array',
      items: {
        enum: ['Success', 'Warning', 'Error'],
      },
    },
    arrayWithDescription: {
      type: 'array',
      items: {
        type: 'integer',
      },
    },
  },
} as const;

export const $ModelWithReference = {
  type: 'object',
  properties: {
    prop: {
      $ref: '#/definitions/ModelWithProperties',
    },
  },
} as const;

export const $ModelWithArray = {
  type: 'object',
  properties: {
    prop: {
      type: 'array',
      items: {
        $ref: '#/definitions/ModelWithString',
      },
    },
    propWithFile: {
      type: 'array',
      items: {
        type: 'file',
      },
    },
    propWithNumber: {
      type: 'array',
      items: {
        type: 'number',
      },
    },
  },
} as const;

export const $ModelWithDictionary = {
  type: 'object',
  properties: {
    prop: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
    },
  },
} as const;

export const $ModelWithCircularReference = {
  type: 'object',
  properties: {
    prop: {
      $ref: '#/definitions/ModelWithCircularReference',
    },
  },
} as const;

export const $ModelWithProperties = {
  type: 'object',
  required: ['required', 'requiredAndReadOnly'],
  properties: {
    required: {
      type: 'string',
    },
    requiredAndReadOnly: {
      type: 'string',
      readOnly: true,
    },
    string: {
      type: 'string',
    },
    number: {
      type: 'number',
    },
    boolean: {
      type: 'boolean',
    },
    reference: {
      $ref: '#/definitions/ModelWithString',
    },
    'property with space': {
      type: 'string',
    },
    default: {
      type: 'string',
    },
    try: {
      type: 'string',
    },
    '@namespace.string': {
      type: 'string',
      readOnly: true,
    },
    '@namespace.integer': {
      type: 'integer',
      readOnly: true,
    },
  },
} as const;

export const $ModelWithNestedProperties = {
  type: 'object',
  required: ['first'],
  properties: {
    first: {
      type: 'object',
      required: ['second'],
      readOnly: true,
      properties: {
        second: {
          type: 'object',
          required: ['third'],
          readOnly: true,
          properties: {
            third: {
              type: 'string',
              readOnly: true,
            },
          },
        },
      },
    },
  },
} as const;

export const $ModelWithDuplicateProperties = {
  type: 'object',
  properties: {
    prop: {
      $ref: '#/definitions/ModelWithString',
    },
  },
} as const;

export const $ModelWithOrderedProperties = {
  type: 'object',
  properties: {
    zebra: {
      type: 'string',
    },
    apple: {
      type: 'string',
    },
    hawaii: {
      type: 'string',
    },
  },
} as const;

export const $ModelWithDuplicateImports = {
  type: 'object',
  properties: {
    propA: {
      $ref: '#/definitions/ModelWithString',
    },
    propB: {
      $ref: '#/definitions/ModelWithString',
    },
    propC: {
      $ref: '#/definitions/ModelWithString',
    },
  },
} as const;

export const $ModelThatExtends = {
  type: 'object',
  allOf: [
    {
      $ref: '#/definitions/ModelWithString',
    },
    {
      type: 'object',
      properties: {
        propExtendsA: {
          type: 'string',
        },
        propExtendsB: {
          $ref: '#/definitions/ModelWithString',
        },
      },
    },
  ],
} as const;

export const $ModelThatExtendsExtends = {
  type: 'object',
  allOf: [
    {
      $ref: '#/definitions/ModelWithString',
    },
    {
      $ref: '#/definitions/ModelThatExtends',
    },
    {
      type: 'object',
      properties: {
        propExtendsC: {
          type: 'string',
        },
        propExtendsD: {
          $ref: '#/definitions/ModelWithString',
        },
      },
    },
  ],
} as const;

export const $default = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
  },
} as const;

export const $ModelWithPattern = {
  type: 'object',
  required: ['key', 'name'],
  properties: {
    key: {
      maxLength: 64,
      pattern: '^[a-zA-Z0-9_]*$',
      type: 'string',
    },
    name: {
      maxLength: 255,
      type: 'string',
    },
    enabled: {
      type: 'boolean',
      readOnly: true,
    },
    modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    id: {
      type: 'string',
      pattern: '^d{2}-d{3}-d{4}$',
    },
    text: {
      type: 'string',
      pattern: '^w+$',
    },
    patternWithSingleQuotes: {
      type: 'string',
      pattern: "^[a-zA-Z0-9']*$",
    },
    patternWithNewline: {
      type: 'string',
      pattern: `aaa
bbb`,
    },
    patternWithBacktick: {
      type: 'string',
      pattern: 'aaa`bbb',
    },
  },
} as const;
