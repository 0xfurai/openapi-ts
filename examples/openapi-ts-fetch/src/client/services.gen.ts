// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from '@hey-api/client-fetch';
import { OpenAPI } from '@hey-api/client-fetch';
import { request as __request } from '@hey-api/client-fetch';

import type { $OpenApiTs } from './types.gen';

export class PetService {
  /**
   * Add a new pet to the store
   * Add a new pet to the store
   * @param data The data for the request.
   * @param data.requestBody Create a new pet in the store
   * @returns Pet Successful operation
   * @throws ApiError
   */
  public static addPet(
    data: $OpenApiTs['/pet']['post']['req'],
  ): CancelablePromise<$OpenApiTs['/pet']['post']['res'][200]> {
    return __request(OpenAPI, {
      body: data.requestBody,
      errors: {
        405: 'Invalid input',
      },
      mediaType: 'application/json',
      method: 'POST',
      url: '/pet',
    });
  }

  /**
   * Update an existing pet
   * Update an existing pet by Id
   * @param data The data for the request.
   * @param data.requestBody Update an existent pet in the store
   * @returns Pet Successful operation
   * @throws ApiError
   */
  public static updatePet(
    data: $OpenApiTs['/pet']['put']['req'],
  ): CancelablePromise<$OpenApiTs['/pet']['put']['res'][200]> {
    return __request(OpenAPI, {
      body: data.requestBody,
      errors: {
        400: 'Invalid ID supplied',
        404: 'Pet not found',
        405: 'Validation exception',
      },
      mediaType: 'application/json',
      method: 'PUT',
      url: '/pet',
    });
  }

  /**
   * Finds Pets by status
   * Multiple status values can be provided with comma separated strings
   * @param data The data for the request.
   * @param data.status Status values that need to be considered for filter
   * @returns Pet successful operation
   * @throws ApiError
   */
  public static findPetsByStatus(
    data: $OpenApiTs['/pet/findByStatus']['get']['req'] = {},
  ): CancelablePromise<$OpenApiTs['/pet/findByStatus']['get']['res'][200]> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid status value',
      },
      method: 'GET',
      query: {
        status: data.status,
      },
      url: '/pet/findByStatus',
    });
  }

  /**
   * Finds Pets by tags
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @param data The data for the request.
   * @param data.tags Tags to filter by
   * @returns Pet successful operation
   * @throws ApiError
   */
  public static findPetsByTags(
    data: $OpenApiTs['/pet/findByTags']['get']['req'] = {},
  ): CancelablePromise<$OpenApiTs['/pet/findByTags']['get']['res'][200]> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid tag value',
      },
      method: 'GET',
      query: {
        tags: data.tags,
      },
      url: '/pet/findByTags',
    });
  }

  /**
   * Find pet by ID
   * Returns a single pet
   * @param data The data for the request.
   * @param data.petId ID of pet to return
   * @returns Pet successful operation
   * @throws ApiError
   */
  public static getPetById(
    data: $OpenApiTs['/pet/{petId}']['get']['req'],
  ): CancelablePromise<$OpenApiTs['/pet/{petId}']['get']['res'][200]> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid ID supplied',
        404: 'Pet not found',
      },
      method: 'GET',
      path: {
        petId: data.petId,
      },
      url: '/pet/{petId}',
    });
  }

  /**
   * Updates a pet in the store with form data
   * @param data The data for the request.
   * @param data.petId ID of pet that needs to be updated
   * @param data.name Name of pet that needs to be updated
   * @param data.status Status of pet that needs to be updated
   * @throws ApiError
   */
  public static updatePetWithForm(
    data: $OpenApiTs['/pet/{petId}']['post']['req'],
  ): CancelablePromise<void> {
    return __request(OpenAPI, {
      errors: {
        405: 'Invalid input',
      },
      method: 'POST',
      path: {
        petId: data.petId,
      },
      query: {
        name: data.name,
        status: data.status,
      },
      url: '/pet/{petId}',
    });
  }

  /**
   * Deletes a pet
   * @param data The data for the request.
   * @param data.petId Pet id to delete
   * @param data.apiKey
   * @throws ApiError
   */
  public static deletePet(
    data: $OpenApiTs['/pet/{petId}']['delete']['req'],
  ): CancelablePromise<void> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid pet value',
      },
      headers: {
        api_key: data.apiKey,
      },
      method: 'DELETE',
      path: {
        petId: data.petId,
      },
      url: '/pet/{petId}',
    });
  }

  /**
   * uploads an image
   * @param data The data for the request.
   * @param data.petId ID of pet to update
   * @param data.additionalMetadata Additional Metadata
   * @param data.requestBody
   * @returns ApiResponse successful operation
   * @throws ApiError
   */
  public static uploadFile(
    data: $OpenApiTs['/pet/{petId}/uploadImage']['post']['req'],
  ): CancelablePromise<
    $OpenApiTs['/pet/{petId}/uploadImage']['post']['res'][200]
  > {
    return __request(OpenAPI, {
      body: data.requestBody,
      mediaType: 'application/octet-stream',
      method: 'POST',
      path: {
        petId: data.petId,
      },
      query: {
        additionalMetadata: data.additionalMetadata,
      },
      url: '/pet/{petId}/uploadImage',
    });
  }
}

export class StoreService {
  /**
   * Returns pet inventories by status
   * Returns a map of status codes to quantities
   * @returns number successful operation
   * @throws ApiError
   */
  public static getInventory(): CancelablePromise<
    $OpenApiTs['/store/inventory']['get']['res'][200]
  > {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/store/inventory',
    });
  }

  /**
   * Place an order for a pet
   * Place a new order in the store
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Order successful operation
   * @throws ApiError
   */
  public static placeOrder(
    data: $OpenApiTs['/store/order']['post']['req'] = {},
  ): CancelablePromise<$OpenApiTs['/store/order']['post']['res'][200]> {
    return __request(OpenAPI, {
      body: data.requestBody,
      errors: {
        405: 'Invalid input',
      },
      mediaType: 'application/json',
      method: 'POST',
      url: '/store/order',
    });
  }

  /**
   * Find purchase order by ID
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   * @param data The data for the request.
   * @param data.orderId ID of order that needs to be fetched
   * @returns Order successful operation
   * @throws ApiError
   */
  public static getOrderById(
    data: $OpenApiTs['/store/order/{orderId}']['get']['req'],
  ): CancelablePromise<
    $OpenApiTs['/store/order/{orderId}']['get']['res'][200]
  > {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid ID supplied',
        404: 'Order not found',
      },
      method: 'GET',
      path: {
        orderId: data.orderId,
      },
      url: '/store/order/{orderId}',
    });
  }

  /**
   * Delete purchase order by ID
   * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   * @param data The data for the request.
   * @param data.orderId ID of the order that needs to be deleted
   * @throws ApiError
   */
  public static deleteOrder(
    data: $OpenApiTs['/store/order/{orderId}']['delete']['req'],
  ): CancelablePromise<void> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid ID supplied',
        404: 'Order not found',
      },
      method: 'DELETE',
      path: {
        orderId: data.orderId,
      },
      url: '/store/order/{orderId}',
    });
  }
}

export class UserService {
  /**
   * Create user
   * This can only be done by the logged in user.
   * @param data The data for the request.
   * @param data.requestBody Created user object
   * @returns User successful operation
   * @throws ApiError
   */
  public static createUser(
    data: $OpenApiTs['/user']['post']['req'] = {},
  ): CancelablePromise<$OpenApiTs['/user']['post']['res'][200]> {
    return __request(OpenAPI, {
      body: data.requestBody,
      mediaType: 'application/json',
      method: 'POST',
      url: '/user',
    });
  }

  /**
   * Creates list of users with given input array
   * Creates list of users with given input array
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful operation
   * @returns unknown successful operation
   * @throws ApiError
   */
  public static createUsersWithListInput(
    data: $OpenApiTs['/user/createWithList']['post']['req'] = {},
  ): CancelablePromise<
    | $OpenApiTs['/user/createWithList']['post']['res'][200]
    | $OpenApiTs['/user/createWithList']['post']['res'][200]
  > {
    return __request(OpenAPI, {
      body: data.requestBody,
      mediaType: 'application/json',
      method: 'POST',
      url: '/user/createWithList',
    });
  }

  /**
   * Logs user into the system
   * @param data The data for the request.
   * @param data.username The user name for login
   * @param data.password The password for login in clear text
   * @returns string successful operation
   * @throws ApiError
   */
  public static loginUser(
    data: $OpenApiTs['/user/login']['get']['req'] = {},
  ): CancelablePromise<$OpenApiTs['/user/login']['get']['res'][200]> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid username/password supplied',
      },
      method: 'GET',
      query: {
        password: data.password,
        username: data.username,
      },
      url: '/user/login',
    });
  }

  /**
   * Logs out current logged in user session
   * @returns unknown successful operation
   * @throws ApiError
   */
  public static logoutUser(): CancelablePromise<
    $OpenApiTs['/user/logout']['get']['res'][200]
  > {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user/logout',
    });
  }

  /**
   * Get user by user name
   * @param data The data for the request.
   * @param data.username The name that needs to be fetched. Use user1 for testing.
   * @returns User successful operation
   * @throws ApiError
   */
  public static getUserByName(
    data: $OpenApiTs['/user/{username}']['get']['req'],
  ): CancelablePromise<$OpenApiTs['/user/{username}']['get']['res'][200]> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid username supplied',
        404: 'User not found',
      },
      method: 'GET',
      path: {
        username: data.username,
      },
      url: '/user/{username}',
    });
  }

  /**
   * Update user
   * This can only be done by the logged in user.
   * @param data The data for the request.
   * @param data.username name that needs to be updated
   * @param data.requestBody Update an existent user in the store
   * @returns unknown successful operation
   * @throws ApiError
   */
  public static updateUser(
    data: $OpenApiTs['/user/{username}']['put']['req'],
  ): CancelablePromise<$OpenApiTs['/user/{username}']['put']['res'][200]> {
    return __request(OpenAPI, {
      body: data.requestBody,
      mediaType: 'application/json',
      method: 'PUT',
      path: {
        username: data.username,
      },
      url: '/user/{username}',
    });
  }

  /**
   * Delete user
   * This can only be done by the logged in user.
   * @param data The data for the request.
   * @param data.username The name that needs to be deleted
   * @throws ApiError
   */
  public static deleteUser(
    data: $OpenApiTs['/user/{username}']['delete']['req'],
  ): CancelablePromise<void> {
    return __request(OpenAPI, {
      errors: {
        400: 'Invalid username supplied',
        404: 'User not found',
      },
      method: 'DELETE',
      path: {
        username: data.username,
      },
      url: '/user/{username}',
    });
  }
}
