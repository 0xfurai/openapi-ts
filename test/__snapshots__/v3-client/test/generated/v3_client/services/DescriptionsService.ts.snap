import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';

export type TDataCallWithDescriptions = {
    /**
     * Testing backticks in string: `backticks` and ```multiple backticks``` should work
     */
    parameterWithBackticks?: unknown;
    /**
     * Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     */
    parameterWithBreaks?: unknown;
    /**
     * Testing expression placeholders in string: ${expression} should work
     */
    parameterWithExpressionPlaceholders?: unknown;
    /**
     * Testing quotes in string: 'single quote''' and "double quotes""" should work
     */
    parameterWithQuotes?: unknown;
    /**
     * Testing reserved characters in string: * inline * and ** inline ** should work
     */
    parameterWithReservedCharacters?: unknown;
    /**
     * Testing slashes in string: \backwards\\\ and /forwards/// should work
     */
    parameterWithSlashes?: unknown;
};

export class DescriptionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @throws ApiError
     */
    public callWithDescriptions(data: TDataCallWithDescriptions = {}): CancelablePromise<void> {
        const {
            parameterWithBackticks,
            parameterWithBreaks,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
            parameterWithSlashes,
        } = data;
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks,
                parameterWithBackticks,
                parameterWithSlashes,
                parameterWithExpressionPlaceholders,
                parameterWithQuotes,
                parameterWithReservedCharacters,
            },
        });
    }
}
