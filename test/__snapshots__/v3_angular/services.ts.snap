import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';

import type {
    ModelWithArrayReadOnlyAndWriteOnly,
    ModelWithReadOnlyAndWriteOnly,
    ModelWithNestedArrayEnumsDataFoo,
    ModelWithOneOfEnum,
    ModelWithString,
    Pageable,
    DeprecatedModel,
    ModelThatExtends,
    ModelThatExtendsExtends,
    ModelWithArray,
    ModelWithDictionary,
    ModelWithEnum,
    NonAsciiStringæøåÆØÅöôêÊ字符串,
} from './models';

export type TDataPostServiceWithEmptyTag = {
    requestBody: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;
};

@Injectable({
    providedIn: 'root',
})
export class DefaultService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public serviceWithEmptyTag(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public postServiceWithEmptyTag(data: TDataPostServiceWithEmptyTag): Observable<ModelWithReadOnlyAndWriteOnly> {
        const { requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/no-tag',
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class SimpleService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

export type TDataDeleteFoo = {
    /**
     * bar in method
     */
    bar: string;
    /**
     * foo in method
     */
    foo: string;
};
export type TDataCallWithParameters = {
    fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
    fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string | null;
    /**
     * This is the parameter that goes into the query params
     */
    parameterQuery: string | null;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;
};
export type TDataCallWithWeirdParameterNames = {
    /**
     * This is the parameter with a reserved keyword
     */
    _default?: string;
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string;
    /**
     * This is the parameter that goes into the request query params
     */
    parameterQuery: string | null;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;
};
export type TDataGetCallWithOptionalParam = {
    /**
     * This is an optional parameter
     */
    parameter?: string;
    /**
     * This is a required parameter
     */
    requestBody: ModelWithOneOfEnum;
};
export type TDataPostCallWithOptionalParam = {
    /**
     * This is a required parameter
     */
    parameter: Pageable;
    /**
     * This is an optional parameter
     */
    requestBody?: ModelWithString;
};

@Injectable({
    providedIn: 'root',
})
export class ParametersService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public deleteFoo(data: TDataDeleteFoo): Observable<void> {
        const { bar, foo } = data;
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {
                foo,
                bar,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callWithParameters(data: TDataCallWithParameters): Observable<void> {
        const {
            fooAllOfEnum,
            fooRefEnum,
            parameterCookie,
            parameterForm,
            parameterHeader,
            parameterPath,
            parameterQuery,
            requestBody,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath,
            },
            cookies: {
                parameterCookie,
            },
            headers: {
                parameterHeader,
            },
            query: {
                foo_ref_enum: fooRefEnum,
                foo_all_of_enum: fooAllOfEnum,
                parameterQuery,
            },
            formData: {
                parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public callWithWeirdParameterNames(data: TDataCallWithWeirdParameterNames): Observable<void> {
        const {
            _default,
            parameterCookie,
            parameterForm,
            parameterHeader,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            parameterQuery,
            requestBody,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                default: _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                parameter_form: parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public getCallWithOptionalParam(data: TDataGetCallWithOptionalParam): Observable<void> {
        const { parameter, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public postCallWithOptionalParam(data: TDataPostCallWithOptionalParam): Observable<void> {
        const { parameter, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

export type TDataCallWithDescriptions = {
    /**
     * Testing backticks in string: `backticks` and ```multiple backticks``` should work
     */
    parameterWithBackticks?: unknown;
    /**
     * Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     */
    parameterWithBreaks?: unknown;
    /**
     * Testing expression placeholders in string: ${expression} should work
     */
    parameterWithExpressionPlaceholders?: unknown;
    /**
     * Testing quotes in string: 'single quote''' and "double quotes""" should work
     */
    parameterWithQuotes?: unknown;
    /**
     * Testing reserved characters in string: * inline * and ** inline ** should work
     */
    parameterWithReservedCharacters?: unknown;
    /**
     * Testing slashes in string: \backwards\\\ and /forwards/// should work
     */
    parameterWithSlashes?: unknown;
};

@Injectable({
    providedIn: 'root',
})
export class DescriptionsService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public callWithDescriptions(data: TDataCallWithDescriptions = {}): Observable<void> {
        const {
            parameterWithBackticks,
            parameterWithBreaks,
            parameterWithExpressionPlaceholders,
            parameterWithQuotes,
            parameterWithReservedCharacters,
            parameterWithSlashes,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks,
                parameterWithBackticks,
                parameterWithSlashes,
                parameterWithExpressionPlaceholders,
                parameterWithQuotes,
                parameterWithReservedCharacters,
            },
        });
    }
}

export type TDataDeprecatedCall = {
    /**
     * This parameter is deprecated
     */
    parameter: DeprecatedModel | null;
};

@Injectable({
    providedIn: 'root',
})
export class DeprecatedService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @deprecated
     * @throws ApiError
     */
    public deprecatedCall(data: TDataDeprecatedCall): Observable<void> {
        const { parameter } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {
                parameter,
            },
        });
    }
}

export type TDataPostApiRequestBody = {
    /**
     * A reusable request body
     */
    foo?: ModelWithString;
    /**
     * This is a reusable parameter
     */
    parameter?: string;
};

@Injectable({
    providedIn: 'root',
})
export class RequestBodyService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public postApiRequestBody(data: TDataPostApiRequestBody = {}): Observable<void> {
        const { foo, parameter } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                parameter,
            },
            body: foo,
            mediaType: 'application/json',
        });
    }
}

export type TDataPostApiFormData = {
    /**
     * A reusable request body
     */
    formData?: ModelWithString;
    /**
     * This is a reusable parameter
     */
    parameter?: string;
};

@Injectable({
    providedIn: 'root',
})
export class FormDataService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public postApiFormData(data: TDataPostApiFormData = {}): Observable<void> {
        const { formData, parameter } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                parameter,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
}

export type TDataCallWithDefaultParameters = {
    /**
     * This is a simple boolean with default value
     */
    parameterBoolean?: boolean | null;
    /**
     * This is a simple enum with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error';
    /**
     * This is a simple model with default value
     */
    parameterModel?: ModelWithString | null;
    /**
     * This is a simple number with default value
     */
    parameterNumber?: number | null;
    /**
     * This is a simple string with default value
     */
    parameterString?: string | null;
};
export type TDataCallWithDefaultOptionalParameters = {
    /**
     * This is a simple boolean that is optional with default value
     */
    parameterBoolean?: boolean;
    /**
     * This is a simple enum that is optional with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error';
    /**
     * This is a simple model that is optional with default value
     */
    parameterModel?: ModelWithString;
    /**
     * This is a simple number that is optional with default value
     */
    parameterNumber?: number;
    /**
     * This is a simple string that is optional with default value
     */
    parameterString?: string;
};
export type TDataCallToTestOrderOfParams = {
    /**
     * This is a optional string with default
     */
    parameterOptionalStringWithDefault?: string;
    /**
     * This is a optional string with empty default
     */
    parameterOptionalStringWithEmptyDefault?: string;
    /**
     * This is a optional string with no default
     */
    parameterOptionalStringWithNoDefault?: string;
    /**
     * This is a string that can be null with default
     */
    parameterStringNullableWithDefault?: string | null;
    /**
     * This is a string that can be null with no default
     */
    parameterStringNullableWithNoDefault?: string | null;
    /**
     * This is a string with default
     */
    parameterStringWithDefault?: string;
    /**
     * This is a string with empty default
     */
    parameterStringWithEmptyDefault?: string;
    /**
     * This is a string with no default
     */
    parameterStringWithNoDefault: string;
};

@Injectable({
    providedIn: 'root',
})
export class DefaultsService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public callWithDefaultParameters(data: TDataCallWithDefaultParameters = {}): Observable<void> {
        const {
            parameterBoolean = true,
            parameterEnum = 'Success',
            parameterModel = {
                prop: 'Hello World!',
            },
            parameterNumber = 123,
            parameterString = 'Hello World!',
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(data: TDataCallWithDefaultOptionalParameters = {}): Observable<void> {
        const {
            parameterBoolean = true,
            parameterEnum = 'Success',
            parameterModel = {
                prop: 'Hello World!',
            },
            parameterNumber = 123,
            parameterString = 'Hello World!',
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString,
                parameterNumber,
                parameterBoolean,
                parameterEnum,
                parameterModel,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public callToTestOrderOfParams(data: TDataCallToTestOrderOfParams): Observable<void> {
        const {
            parameterOptionalStringWithDefault = 'Hello World!',
            parameterOptionalStringWithEmptyDefault = '',
            parameterOptionalStringWithNoDefault,
            parameterStringNullableWithDefault = null,
            parameterStringNullableWithNoDefault,
            parameterStringWithDefault = 'Hello World!',
            parameterStringWithEmptyDefault = '',
            parameterStringWithNoDefault,
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault,
                parameterOptionalStringWithEmptyDefault,
                parameterOptionalStringWithNoDefault,
                parameterStringWithDefault,
                parameterStringWithEmptyDefault,
                parameterStringWithNoDefault,
                parameterStringNullableWithNoDefault,
                parameterStringNullableWithDefault,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class DuplicateService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public duplicateName(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName1(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName2(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public duplicateName3(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class NoContentService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public callWithNoContentResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<number | void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class ResponseService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<number | void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public callWithResponse(): Observable<ModelWithString> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithDuplicateResponses(): Observable<ModelWithString> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(): Observable<
        | {
              readonly '@namespace.string'?: string;
              readonly '@namespace.integer'?: number;
              readonly value?: Array<ModelWithString>;
          }
        | ModelWithString
        | ModelThatExtends
        | ModelThatExtendsExtends
    > {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags1Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags2Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyA(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class MultipleTags3Service {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export type TDataCollectionFormat = {
    /**
     * This is an array parameter that is sent as csv format (comma-separated values)
     */
    parameterArrayCsv: Array<string> | null;
    /**
     * This is an array parameter that is sent as multi format (multiple parameter instances)
     */
    parameterArrayMulti: Array<string> | null;
    /**
     * This is an array parameter that is sent as pipes format (pipe-separated values)
     */
    parameterArrayPipes: Array<string> | null;
    /**
     * This is an array parameter that is sent as ssv format (space-separated values)
     */
    parameterArraySsv: Array<string> | null;
    /**
     * This is an array parameter that is sent as tsv format (tab-separated values)
     */
    parameterArrayTsv: Array<string> | null;
};

@Injectable({
    providedIn: 'root',
})
export class CollectionFormatService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public collectionFormat(data: TDataCollectionFormat): Observable<void> {
        const { parameterArrayCsv, parameterArrayMulti, parameterArrayPipes, parameterArraySsv, parameterArrayTsv } =
            data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                parameterArrayCSV: parameterArrayCsv,
                parameterArraySSV: parameterArraySsv,
                parameterArrayTSV: parameterArrayTsv,
                parameterArrayPipes,
                parameterArrayMulti,
            },
        });
    }
}

export type TDataTypes = {
    /**
     * This is a number parameter
     */
    id?: number;
    /**
     * This is an array parameter
     */
    parameterArray: Array<string> | null;
    /**
     * This is a boolean parameter
     */
    parameterBoolean?: boolean | null;
    /**
     * This is a dictionary parameter
     */
    parameterDictionary: Record<string, unknown> | null;
    /**
     * This is an enum parameter
     */
    parameterEnum: 'Success' | 'Warning' | 'Error' | null;
    /**
     * This is a number parameter
     */
    parameterNumber?: number;
    /**
     * This is an object parameter
     */
    parameterObject?: Record<string, unknown> | null;
    /**
     * This is a string parameter
     */
    parameterString?: string | null;
};

@Injectable({
    providedIn: 'root',
})
export class TypesService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public types(data: TDataTypes): Observable<number | string | boolean | Record<string, unknown>> {
        const {
            id,
            parameterArray,
            parameterBoolean = true,
            parameterDictionary,
            parameterEnum,
            parameterNumber = 123,
            parameterObject = null,
            parameterString = 'default',
        } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id,
            },
            query: {
                parameterNumber,
                parameterString,
                parameterBoolean,
                parameterObject,
                parameterArray,
                parameterDictionary,
                parameterEnum,
            },
        });
    }
}

export type TDataUploadFile = {
    /**
     * Supply a file reference for upload
     */
    file: Blob | File;
};

@Injectable({
    providedIn: 'root',
})
export class UploadService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns boolean
     * @throws ApiError
     */
    public uploadFile(data: TDataUploadFile): Observable<boolean> {
        const { file } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {
                file,
            },
        });
    }
}

export type TDataFileResponse = {
    id: string;
};

@Injectable({
    providedIn: 'root',
})
export class FileResponseService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns binary Success
     * @throws ApiError
     */
    public fileResponse(data: TDataFileResponse): Observable<Blob | File> {
        const { id } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            path: {
                id,
            },
        });
    }
}

export type TDataComplexTypes = {
    /**
     * Parameter containing object
     */
    parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    };
    /**
     * Parameter containing reference
     */
    parameterReference: ModelWithString;
};
export type TDataComplexParams = {
    id: number;
    requestBody?: {
        readonly key: string | null;
        name: string | null;
        enabled?: boolean;
        readonly type: 'Monkey' | 'Horse' | 'Bird';
        listOfModels?: Array<ModelWithString> | null;
        listOfStrings?: Array<string> | null;
        parameters: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
        readonly user?: {
            readonly id?: number;
            readonly name?: string | null;
        };
    };
};

@Injectable({
    providedIn: 'root',
})
export class ComplexService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(data: TDataComplexTypes): Observable<Array<ModelWithString>> {
        const { parameterObject, parameterReference } = data;
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                parameterObject,
                parameterReference,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }

    /**
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public complexParams(data: TDataComplexParams): Observable<ModelWithString> {
        const { id, requestBody } = data;
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {
                id,
            },
            body: requestBody,
            mediaType: 'application/json-patch+json',
        });
    }
}

export type TDataMultipartRequest = {
    formData?: {
        content?: Blob | File;
        data?: ModelWithString | null;
    };
};

@Injectable({
    providedIn: 'root',
})
export class MultipartService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @throws ApiError
     */
    public multipartRequest(data: TDataMultipartRequest = {}): Observable<void> {
        const { formData } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public multipartResponse(): Observable<{
        file?: Blob | File;
        metadata?: {
            foo?: string;
            bar?: string;
        };
    }> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
        });
    }
}

@Injectable({
    providedIn: 'root',
})
export class HeaderService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(): Observable<string> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export type TDataTestErrorCode = {
    /**
     * Status code to return
     */
    status: number;
};

@Injectable({
    providedIn: 'root',
})
export class ErrorService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(data: TDataTestErrorCode): Observable<any> {
        const { status } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

export type TDataNonAsciiæøåÆøÅöôêÊ字符串 = {
    /**
     * Dummy input param
     */
    nonAsciiParamæøåÆøÅöôêÊ: number;
};

@Injectable({
    providedIn: 'root',
})
export class NonAsciiÆøåÆøÅöôêÊService {
    constructor(public readonly http: HttpClient) {}

    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public nonAsciiæøåÆøÅöôêÊ字符串(
        data: TDataNonAsciiæøåÆøÅöôêÊ字符串
    ): Observable<Array<NonAsciiStringæøåÆØÅöôêÊ字符串>> {
        const { nonAsciiParamæøåÆøÅöôêÊ } = data;
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                nonAsciiParamæøåÆØÅöôêÊ: nonAsciiParamæøåÆøÅöôêÊ,
            },
        });
    }
}
