// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { parentModelWithDates, modelWithDates, modelWithDatesArray, arrayOfDates, date, multipleResponses } from '../services.gen';
import type { ParentModelWithDatesError, ParentModelWithDatesResponse, ModelWithDatesError, ModelWithDatesResponse, ModelWithDatesArrayError, ModelWithDatesArrayResponse, ArrayOfDatesError, ArrayOfDatesResponse, DateError, DateResponse, MultipleResponsesError, MultipleResponsesResponse } from '../types.gen';

export const parentModelWithDatesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await parentModelWithDates({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: {
                body: options?.body ?? {},
                headers: options?.headers ?? {},
                path: options?.path ?? {},
                query: options?.query ?? {}
            },
            scope: 'parentModelWithDates'
        }
    ]
}); };

export const parentModelWithDatesMutation: UseMutationOptions<ParentModelWithDatesResponse, ParentModelWithDatesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await parentModelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const modelWithDatesMutation: UseMutationOptions<ModelWithDatesResponse, ModelWithDatesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const modelWithDatesArrayMutation: UseMutationOptions<ModelWithDatesArrayResponse, ModelWithDatesArrayError, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDatesArray({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const arrayOfDatesMutation: UseMutationOptions<ArrayOfDatesResponse, ArrayOfDatesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await arrayOfDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const dateMutation: UseMutationOptions<DateResponse, DateError, Options> = {
    mutationFn: async (options) => {
        const { data } = await date({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const multipleResponsesMutation: UseMutationOptions<MultipleResponsesResponse, MultipleResponsesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await multipleResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
};