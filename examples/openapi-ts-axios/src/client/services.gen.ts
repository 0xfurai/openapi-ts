// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-axios';

import type {
  AddPetData,
  AddPetError,
  AddPetResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputError,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusError,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsError,
  FindPetsByTagsResponse,
  GetInventoryError,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdError,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdError,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameError,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserError,
  LogoutUserResponse,
  PlaceOrderData,
  PlaceOrderError,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetError,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  UploadFileData,
  UploadFileError,
  UploadFileResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Add a new pet to the store
 * Add a new pet to the store
 */
export const addPet = <ThrowOnError extends boolean = false>(
  options: Options<AddPetData, ThrowOnError>,
) =>
  (options?.client ?? client).post<ThrowOnError, AddPetResponse, AddPetError>({
    ...options,
    url: '/pet',
  });

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetData, ThrowOnError>,
) =>
  (options?.client ?? client).put<
    ThrowOnError,
    UpdatePetResponse,
    UpdatePetError
  >({
    ...options,
    url: '/pet',
  });

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <ThrowOnError extends boolean = false>(
  options?: Options<FindPetsByStatusData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    FindPetsByStatusResponse,
    FindPetsByStatusError
  >({
    ...options,
    url: '/pet/findByStatus',
  });

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <ThrowOnError extends boolean = false>(
  options?: Options<FindPetsByTagsData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    FindPetsByTagsResponse,
    FindPetsByTagsError
  >({
    ...options,
    url: '/pet/findByTags',
  });

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <ThrowOnError extends boolean = false>(
  options: Options<GetPetByIdData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    GetPetByIdResponse,
    GetPetByIdError
  >({
    ...options,
    url: '/pet/{petId}',
  });

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetWithFormData, ThrowOnError>,
) =>
  (options?.client ?? client).post<ThrowOnError, void>({
    ...options,
    url: '/pet/{petId}',
  });

/**
 * Deletes a pet
 */
export const deletePet = <ThrowOnError extends boolean = false>(
  options: Options<DeletePetData, ThrowOnError>,
) =>
  (options?.client ?? client).delete<ThrowOnError, void>({
    ...options,
    url: '/pet/{petId}',
  });

/**
 * uploads an image
 */
export const uploadFile = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileData, ThrowOnError>,
) =>
  (options?.client ?? client).post<
    ThrowOnError,
    UploadFileResponse,
    UploadFileError
  >({
    ...options,
    url: '/pet/{petId}/uploadImage',
  });

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    GetInventoryResponse,
    GetInventoryError
  >({
    ...options,
    url: '/store/inventory',
  });

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder = <ThrowOnError extends boolean = false>(
  options?: Options<PlaceOrderData, ThrowOnError>,
) =>
  (options?.client ?? client).post<
    ThrowOnError,
    PlaceOrderResponse,
    PlaceOrderError
  >({
    ...options,
    url: '/store/order',
  });

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderByIdData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    GetOrderByIdResponse,
    GetOrderByIdError
  >({
    ...options,
    url: '/store/order/{orderId}',
  });

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOrderData, ThrowOnError>,
) =>
  (options?.client ?? client).delete<ThrowOnError, void>({
    ...options,
    url: '/store/order/{orderId}',
  });

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUserData, ThrowOnError>,
) =>
  (options?.client ?? client).post<
    ThrowOnError,
    CreateUserResponse,
    CreateUserError
  >({
    ...options,
    url: '/user',
  });

/**
 * Creates list of users with given input array
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUsersWithListInputData, ThrowOnError>,
) =>
  (options?.client ?? client).post<
    ThrowOnError,
    CreateUsersWithListInputResponse,
    CreateUsersWithListInputError
  >({
    ...options,
    url: '/user/createWithList',
  });

/**
 * Logs user into the system
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options?: Options<LoginUserData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    LoginUserResponse,
    LoginUserError
  >({
    ...options,
    url: '/user/login',
  });

/**
 * Logs out current logged in user session
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    LogoutUserResponse,
    LogoutUserError
  >({
    ...options,
    url: '/user/logout',
  });

/**
 * Get user by user name
 */
export const getUserByName = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByNameData, ThrowOnError>,
) =>
  (options?.client ?? client).get<
    ThrowOnError,
    GetUserByNameResponse,
    GetUserByNameError
  >({
    ...options,
    url: '/user/{username}',
  });

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
) =>
  (options?.client ?? client).put<
    ThrowOnError,
    UpdateUserResponse,
    UpdateUserError
  >({
    ...options,
    url: '/user/{username}',
  });

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
) =>
  (options?.client ?? client).delete<ThrowOnError, void>({
    ...options,
    url: '/user/{username}',
  });
