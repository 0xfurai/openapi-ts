// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

import {
  type Composable,
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-nuxt';

import type {
  AddPetData,
  AddPetResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsResponse,
  GetInventoryData,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserResponse,
  LogoutUserData,
  PlaceOrderData,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
  UploadFileResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Add a new pet to the store
 * Add a new pet to the store
 */
export const addPet = <TComposable extends Composable>(
  options: Options<AddPetData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<AddPetResponse, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/pet',
  });

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet = <TComposable extends Composable>(
  options: Options<UpdatePetData, unknown, TComposable>,
) =>
  (options?.client ?? client).put<UpdatePetResponse, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/pet',
  });

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <TComposable extends Composable>(
  options?: Options<FindPetsByStatusData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<
    FindPetsByStatusResponse,
    unknown,
    TComposable
  >({
    ...options,
    url: '/pet/findByStatus',
  });

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <TComposable extends Composable>(
  options?: Options<FindPetsByTagsData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<FindPetsByTagsResponse, unknown, TComposable>(
    {
      ...options,
      url: '/pet/findByTags',
    },
  );

/**
 * Deletes a pet
 */
export const deletePet = <TComposable extends Composable>(
  options: Options<DeletePetData, unknown, TComposable>,
) =>
  (options?.client ?? client).delete<unknown, unknown, TComposable>({
    ...options,
    url: '/pet/{petId}',
  });

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <TComposable extends Composable>(
  options: Options<GetPetByIdData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<GetPetByIdResponse, unknown, TComposable>({
    ...options,
    security: [
      {
        fn: 'apiKey',
        in: 'header',
        name: 'api_key',
      },
    ],
    // url: '/pet/{petId}',
    url: '/pet/8',
  });

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <TComposable extends Composable>(
  options: Options<UpdatePetWithFormData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<unknown, unknown, TComposable>({
    ...options,
    url: '/pet/{petId}',
  });

/**
 * uploads an image
 */
export const uploadFile = <TComposable extends Composable>(
  options: Options<UploadFileData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<UploadFileResponse, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options?.headers,
    },
    url: '/pet/{petId}/uploadImage',
  });

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <TComposable extends Composable>(
  options?: Options<GetInventoryData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<GetInventoryResponse, unknown, TComposable>({
    ...options,
    security: [
      {
        fn: 'apiKey',
        in: 'header',
        name: 'api_key',
      },
    ],
    url: '/store/inventory',
  });

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder = <TComposable extends Composable>(
  options?: Options<PlaceOrderData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<PlaceOrderResponse, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/store/order',
  });

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = <TComposable extends Composable>(
  options: Options<DeleteOrderData, unknown, TComposable>,
) =>
  (options?.client ?? client).delete<unknown, unknown, TComposable>({
    ...options,
    url: '/store/order/{orderId}',
  });

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <TComposable extends Composable>(
  options: Options<GetOrderByIdData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<GetOrderByIdResponse, unknown, TComposable>({
    ...options,
    url: '/store/order/{orderId}',
  });

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <TComposable extends Composable>(
  options?: Options<CreateUserData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<CreateUserResponse, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/user',
  });

/**
 * Creates list of users with given input array
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <TComposable extends Composable>(
  options?: Options<CreateUsersWithListInputData, unknown, TComposable>,
) =>
  (options?.client ?? client).post<
    CreateUsersWithListInputResponse,
    unknown,
    TComposable
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/user/createWithList',
  });

/**
 * Logs user into the system
 */
export const loginUser = <TComposable extends Composable>(
  options?: Options<LoginUserData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<LoginUserResponse, unknown, TComposable>({
    ...options,
    url: '/user/login',
  });

/**
 * Logs out current logged in user session
 */
export const logoutUser = <TComposable extends Composable>(
  options?: Options<LogoutUserData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<unknown, unknown, TComposable>({
    ...options,
    url: '/user/logout',
  });

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <TComposable extends Composable>(
  options: Options<DeleteUserData, unknown, TComposable>,
) =>
  (options?.client ?? client).delete<unknown, unknown, TComposable>({
    ...options,
    url: '/user/{username}',
  });

/**
 * Get user by user name
 */
export const getUserByName = <TComposable extends Composable>(
  options: Options<GetUserByNameData, unknown, TComposable>,
) =>
  (options?.client ?? client).get<GetUserByNameResponse, unknown, TComposable>({
    ...options,
    url: '/user/{username}',
  });

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser = <TComposable extends Composable>(
  options: Options<UpdateUserData, unknown, TComposable>,
) =>
  (options?.client ?? client).put<unknown, unknown, TComposable>({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/user/{username}',
  });
