import type { ModelWithNestedArrayEnumsDataFoo, ModelWithOneOfEnum, ModelWithString, Pageable } from '../models';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TDataDeleteFoo = {
    /**
     * bar in method
     */
    bar: string;
    /**
     * foo in method
     */
    foo: string;

    query?: {};
};
export type TDataCallWithParameters = {
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string | null;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;

    query: {
        fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
        fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
        /**
         * This is the parameter that goes into the query params
         */
        parameterQuery: string | null;
    };
};
export type TDataCallWithWeirdParameterNames = {
    /**
     * This is the parameter that goes into the cookie
     */
    parameterCookie: string | null;
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string | null;
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string | null;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string;
    /**
     * This is the parameter that goes into the body
     */
    requestBody: ModelWithString | null;

    query: {
        /**
         * This is the parameter with a reserved keyword
         */
        _default?: string;
        /**
         * This is the parameter that goes into the request query params
         */
        parameterQuery: string | null;
    };
};
export type TDataGetCallWithOptionalParam = {
    /**
     * This is a required parameter
     */
    requestBody: ModelWithOneOfEnum;

    query?: {
        /**
         * This is an optional parameter
         */
        parameter?: string;
    };
};
export type TDataPostCallWithOptionalParam = {
    /**
     * This is an optional parameter
     */
    requestBody?: ModelWithString;

    query: {
        /**
         * This is a required parameter
         */
        parameter: Pageable;
    };
};

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static deleteFoo(data: TDataDeleteFoo): CancelablePromise<void> {
        const { query, bar, foo } = data;
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {},
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithParameters(data: TDataCallWithParameters): CancelablePromise<void> {
        const { query, parameterCookie, parameterForm, parameterHeader, parameterPath, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(data: TDataCallWithWeirdParameterNames): CancelablePromise<void> {
        const {
            query,
            parameterCookie,
            parameterForm,
            parameterHeader,
            parameterPath1,
            parameterPath2,
            parameterPath3,
            requestBody,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static getCallWithOptionalParam(data: TDataGetCallWithOptionalParam): CancelablePromise<void> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithOptionalParam(data: TDataPostCallWithOptionalParam): CancelablePromise<void> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}
