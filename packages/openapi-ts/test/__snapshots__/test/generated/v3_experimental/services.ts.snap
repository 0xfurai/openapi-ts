import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';

import type {
    ModelWithArrayReadOnlyAndWriteOnly,
    ModelWithReadOnlyAndWriteOnly,
    ModelWithNestedArrayEnumsDataFoo,
    ModelWithOneOfEnum,
    ModelWithString,
    Pageable,
    DeprecatedModel,
    ModelThatExtends,
    ModelThatExtendsExtends,
    ModelWithArray,
    ModelWithDictionary,
    ModelWithEnum,
    NonAsciiStringæøåÆØÅöôêÊ字符串,
} from './models';

export type DefaultData = {
    PostServiceWithEmptyTag: {
        requestBody: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;

        query?: {};
    };
};

export type SimpleData = {};

export type ParametersData = {
    DeleteFoo: {
        /**
         * bar in method
         */
        bar: string;
        /**
         * foo in method
         */
        foo: string;

        query?: {};
    };
    CallWithParameters: {
        /**
         * This is the parameter that goes into the cookie
         */
        parameterCookie: string | null;
        /**
         * This is the parameter that goes into the form data
         */
        parameterForm: string | null;
        /**
         * This is the parameter that goes into the header
         */
        parameterHeader: string | null;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath: string | null;
        /**
         * This is the parameter that goes into the body
         */
        requestBody: ModelWithString | null;

        query: {
            fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
            fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
            /**
             * This is the parameter that goes into the query params
             */
            parameterQuery: string | null;
        };
    };
    CallWithWeirdParameterNames: {
        /**
         * This is the parameter that goes into the cookie
         */
        parameterCookie: string | null;
        /**
         * This is the parameter that goes into the request form data
         */
        parameterForm: string | null;
        /**
         * This is the parameter that goes into the request header
         */
        parameterHeader: string | null;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath1?: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath2?: string;
        /**
         * This is the parameter that goes into the path
         */
        parameterPath3?: string;
        /**
         * This is the parameter that goes into the body
         */
        requestBody: ModelWithString | null;

        query: {
            /**
             * This is the parameter with a reserved keyword
             */
            _default?: string;
            /**
             * This is the parameter that goes into the request query params
             */
            parameterQuery: string | null;
        };
    };
    GetCallWithOptionalParam: {
        /**
         * This is a required parameter
         */
        requestBody: ModelWithOneOfEnum;

        query?: {
            /**
             * This is an optional parameter
             */
            parameter?: string;
        };
    };
    PostCallWithOptionalParam: {
        /**
         * This is an optional parameter
         */
        requestBody?: ModelWithString;

        query: {
            /**
             * This is a required parameter
             */
            parameter: Pageable;
        };
    };
};

export type DescriptionsData = {
    CallWithDescriptions: {
        query?: {
            /**
             * Testing backticks in string: `backticks` and ```multiple backticks``` should work
             */
            parameterWithBackticks?: unknown;
            /**
             * Testing multiline comments in string: First line
             * Second line
             *
             * Fourth line
             */
            parameterWithBreaks?: unknown;
            /**
             * Testing expression placeholders in string: ${expression} should work
             */
            parameterWithExpressionPlaceholders?: unknown;
            /**
             * Testing quotes in string: 'single quote''' and "double quotes""" should work
             */
            parameterWithQuotes?: unknown;
            /**
             * Testing reserved characters in string: * inline * and ** inline ** should work
             */
            parameterWithReservedCharacters?: unknown;
            /**
             * Testing slashes in string: \backwards\\\ and /forwards/// should work
             */
            parameterWithSlashes?: unknown;
        };
    };
};

export type DeprecatedData = {
    DeprecatedCall: {
        /**
         * This parameter is deprecated
         */
        parameter: DeprecatedModel | null;

        query?: {};
    };
};

export type RequestBodyData = {
    PostApiRequestBody: {
        /**
         * A reusable request body
         */
        foo?: ModelWithString;

        query?: {
            /**
             * This is a reusable parameter
             */
            parameter?: string;
        };
    };
};

export type FormDataData = {
    PostApiFormData: {
        /**
         * A reusable request body
         */
        formData?: ModelWithString;

        query?: {
            /**
             * This is a reusable parameter
             */
            parameter?: string;
        };
    };
};

export type DefaultsData = {
    CallWithDefaultParameters: {
        query?: {
            /**
             * This is a simple boolean with default value
             */
            parameterBoolean?: boolean | null;
            /**
             * This is a simple enum with default value
             */
            parameterEnum?: 'Success' | 'Warning' | 'Error';
            /**
             * This is a simple model with default value
             */
            parameterModel?: ModelWithString | null;
            /**
             * This is a simple number with default value
             */
            parameterNumber?: number | null;
            /**
             * This is a simple string with default value
             */
            parameterString?: string | null;
        };
    };
    CallWithDefaultOptionalParameters: {
        query?: {
            /**
             * This is a simple boolean that is optional with default value
             */
            parameterBoolean?: boolean;
            /**
             * This is a simple enum that is optional with default value
             */
            parameterEnum?: 'Success' | 'Warning' | 'Error';
            /**
             * This is a simple model that is optional with default value
             */
            parameterModel?: ModelWithString;
            /**
             * This is a simple number that is optional with default value
             */
            parameterNumber?: number;
            /**
             * This is a simple string that is optional with default value
             */
            parameterString?: string;
        };
    };
    CallToTestOrderOfParams: {
        query: {
            /**
             * This is a optional string with default
             */
            parameterOptionalStringWithDefault?: string;
            /**
             * This is a optional string with empty default
             */
            parameterOptionalStringWithEmptyDefault?: string;
            /**
             * This is a optional string with no default
             */
            parameterOptionalStringWithNoDefault?: string;
            /**
             * This is a string that can be null with default
             */
            parameterStringNullableWithDefault?: string | null;
            /**
             * This is a string that can be null with no default
             */
            parameterStringNullableWithNoDefault?: string | null;
            /**
             * This is a string with default
             */
            parameterStringWithDefault?: string;
            /**
             * This is a string with empty default
             */
            parameterStringWithEmptyDefault?: string;
            /**
             * This is a string with no default
             */
            parameterStringWithNoDefault: string;
        };
    };
};

export type DuplicateData = {};

export type NoContentData = {};

export type ResponseData = {};

export type MultipleTags1Data = {};

export type MultipleTags2Data = {};

export type MultipleTags3Data = {};

export type CollectionFormatData = {
    CollectionFormat: {
        query: {
            /**
             * This is an array parameter that is sent as csv format (comma-separated values)
             */
            parameterArrayCsv: Array<string> | null;
            /**
             * This is an array parameter that is sent as multi format (multiple parameter instances)
             */
            parameterArrayMulti: Array<string> | null;
            /**
             * This is an array parameter that is sent as pipes format (pipe-separated values)
             */
            parameterArrayPipes: Array<string> | null;
            /**
             * This is an array parameter that is sent as ssv format (space-separated values)
             */
            parameterArraySsv: Array<string> | null;
            /**
             * This is an array parameter that is sent as tsv format (tab-separated values)
             */
            parameterArrayTsv: Array<string> | null;
        };
    };
};

export type TypesData = {
    Types: {
        /**
         * This is a number parameter
         */
        id?: number;

        query: {
            /**
             * This is an array parameter
             */
            parameterArray: Array<string> | null;
            /**
             * This is a boolean parameter
             */
            parameterBoolean?: boolean | null;
            /**
             * This is a dictionary parameter
             */
            parameterDictionary: Record<string, unknown> | null;
            /**
             * This is an enum parameter
             */
            parameterEnum: 'Success' | 'Warning' | 'Error' | null;
            /**
             * This is a number parameter
             */
            parameterNumber?: number;
            /**
             * This is an object parameter
             */
            parameterObject?: Record<string, unknown> | null;
            /**
             * This is a string parameter
             */
            parameterString?: string | null;
        };
    };
};

export type UploadData = {
    UploadFile: {
        /**
         * Supply a file reference for upload
         */
        file: Blob | File;

        query?: {};
    };
};

export type FileResponseData = {
    FileResponse: {
        id: string;

        query?: {};
    };
};

export type ComplexData = {
    ComplexTypes: {
        query: {
            /**
             * Parameter containing object
             */
            parameterObject: {
                first?: {
                    second?: {
                        third?: string;
                    };
                };
            };
            /**
             * Parameter containing reference
             */
            parameterReference: ModelWithString;
        };
    };
    ComplexParams: {
        id: number;
        requestBody?: {
            readonly key: string | null;
            name: string | null;
            enabled?: boolean;
            readonly type: 'Monkey' | 'Horse' | 'Bird';
            listOfModels?: Array<ModelWithString> | null;
            listOfStrings?: Array<string> | null;
            parameters: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
            readonly user?: {
                readonly id?: number;
                readonly name?: string | null;
            };
        };

        query?: {};
    };
};

export type MultipartData = {
    MultipartRequest: {
        formData?: {
            content?: Blob | File;
            data?: ModelWithString | null;
        };

        query?: {};
    };
};

export type HeaderData = {};

export type ErrorData = {
    TestErrorCode: {
        query: {
            /**
             * Status code to return
             */
            status: number;
        };
    };
};

export type NonAsciiÆøåÆøÅöôêÊData = {
    NonAsciiæøåÆøÅöôêÊ字符串: {
        query: {
            /**
             * Dummy input param
             */
            nonAsciiParamæøåÆøÅöôêÊ: number;
        };
    };
};

export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

    /**
     * @returns ModelWithReadOnlyAndWriteOnly
     * @throws ApiError
     */
    public static postServiceWithEmptyTag(
        data: DefaultData['PostServiceWithEmptyTag']
    ): CancelablePromise<ModelWithReadOnlyAndWriteOnly> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/no-tag',
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}

export class ParametersService {
    /**
     * @throws ApiError
     */
    public static deleteFoo(data: ParametersData['DeleteFoo']): CancelablePromise<void> {
        const { query, foo, bar } = data;
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo}/bar/{bar}',
            path: {},
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithParameters(data: ParametersData['CallWithParameters']): CancelablePromise<void> {
        const { query, parameterHeader, parameterForm, parameterCookie, parameterPath, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        data: ParametersData['CallWithWeirdParameterNames']
    ): CancelablePromise<void> {
        const {
            query,
            parameterHeader,
            parameterForm,
            parameterCookie,
            requestBody,
            parameterPath1,
            parameterPath2,
            parameterPath3,
        } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {},
            cookies: {},
            headers: {},
            query: {
                ...query,
            },
            formData: {},
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static getCallWithOptionalParam(data: ParametersData['GetCallWithOptionalParam']): CancelablePromise<void> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithOptionalParam(
        data: ParametersData['PostCallWithOptionalParam']
    ): CancelablePromise<void> {
        const { query, requestBody } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                ...query,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}

export class DescriptionsService {
    /**
     * @throws ApiError
     */
    public static callWithDescriptions(data: DescriptionsData['CallWithDescriptions'] = {}): CancelablePromise<void> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                ...query,
            },
        });
    }
}

export class DeprecatedService {
    /**
     * @deprecated
     * @throws ApiError
     */
    public static deprecatedCall(data: DeprecatedData['DeprecatedCall']): CancelablePromise<void> {
        const { query, parameter } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {},
        });
    }
}

export class RequestBodyService {
    /**
     * @throws ApiError
     */
    public static postApiRequestBody(data: RequestBodyData['PostApiRequestBody'] = {}): CancelablePromise<void> {
        const { query, foo } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                ...query,
            },
            body: foo,
            mediaType: 'application/json',
        });
    }
}

export class FormDataService {
    /**
     * @throws ApiError
     */
    public static postApiFormData(data: FormDataData['PostApiFormData'] = {}): CancelablePromise<void> {
        const { query, formData } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                ...query,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
}

export class DefaultsService {
    /**
     * @throws ApiError
     */
    public static callWithDefaultParameters(
        data: DefaultsData['CallWithDefaultParameters'] = {}
    ): CancelablePromise<void> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: 'Hello World!',
                parameterNumber: 123,
                parameterBoolean: true,
                parameterEnum: 'Success',
                parameterModel: {
                    prop: 'Hello World!',
                },
                ...query,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        data: DefaultsData['CallWithDefaultOptionalParameters'] = {}
    ): CancelablePromise<void> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: 'Hello World!',
                parameterNumber: 123,
                parameterBoolean: true,
                parameterEnum: 'Success',
                parameterModel: {
                    prop: 'Hello World!',
                },
                ...query,
            },
        });
    }

    /**
     * @throws ApiError
     */
    public static callToTestOrderOfParams(data: DefaultsData['CallToTestOrderOfParams']): CancelablePromise<void> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault: 'Hello World!',
                parameterOptionalStringWithEmptyDefault: '',
                parameterStringWithDefault: 'Hello World!',
                parameterStringWithEmptyDefault: '',
                parameterStringNullableWithDefault: null,
                ...query,
            },
        });
    }
}

export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}

export class NoContentService {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<number | void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }
}

export class ResponseService {
    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public static callWithResponseAndNoContentResponse(): CancelablePromise<number | void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        });
    }

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<
        | {
              readonly '@namespace.string'?: string;
              readonly '@namespace.integer'?: number;
              readonly value?: Array<ModelWithString>;
          }
        | ModelWithString
        | ModelThatExtends
        | ModelThatExtendsExtends
    > {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: `Message for 500 error`,
                501: `Message for 501 error`,
                502: `Message for 502 error`,
            },
        });
    }
}

export class MultipleTags1Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags2Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class MultipleTags3Service {
    /**
     * @returns void Success
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}

export class CollectionFormatService {
    /**
     * @throws ApiError
     */
    public static collectionFormat(data: CollectionFormatData['CollectionFormat']): CancelablePromise<void> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                ...query,
            },
        });
    }
}

export class TypesService {
    /**
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public static types(
        data: TypesData['Types']
    ): CancelablePromise<number | string | boolean | Record<string, unknown>> {
        const { query, id } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {},
            query: {
                parameterNumber: 123,
                parameterString: 'default',
                parameterBoolean: true,
                parameterObject: null,
                ...query,
            },
        });
    }
}

export class UploadService {
    /**
     * @returns boolean
     * @throws ApiError
     */
    public static uploadFile(data: UploadData['UploadFile']): CancelablePromise<boolean> {
        const { query, file } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {},
        });
    }
}

export class FileResponseService {
    /**
     * @returns binary Success
     * @throws ApiError
     */
    public static fileResponse(data: FileResponseData['FileResponse']): CancelablePromise<Blob | File> {
        const { query, id } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            path: {},
        });
    }
}

export class ComplexService {
    /**
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(data: ComplexData['ComplexTypes']): CancelablePromise<Array<ModelWithString>> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                ...query,
            },
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }

    /**
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public static complexParams(data: ComplexData['ComplexParams']): CancelablePromise<ModelWithString> {
        const { query, id, requestBody } = data;
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {},
            body: requestBody,
            mediaType: 'application/json-patch+json',
        });
    }
}

export class MultipartService {
    /**
     * @throws ApiError
     */
    public static multipartRequest(data: MultipartData['MultipartRequest'] = {}): CancelablePromise<void> {
        const { query, formData } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public static multipartResponse(): CancelablePromise<{
        file?: Blob | File;
        metadata?: {
            foo?: string;
            bar?: string;
        };
    }> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
        });
    }
}

export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: `400 server error`,
                500: `500 server error`,
            },
        });
    }
}

export class ErrorService {
    /**
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(data: ErrorData['TestErrorCode']): CancelablePromise<any> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                ...query,
            },
            errors: {
                500: `Custom message: Internal Server Error`,
                501: `Custom message: Not Implemented`,
                502: `Custom message: Bad Gateway`,
                503: `Custom message: Service Unavailable`,
            },
        });
    }
}

export class NonAsciiÆøåÆøÅöôêÊService {
    /**
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public static nonAsciiæøåÆøÅöôêÊ字符串(
        data: NonAsciiÆøåÆøÅöôêÊData['NonAsciiæøåÆøÅöôêÊ字符串']
    ): CancelablePromise<Array<NonAsciiStringæøåÆØÅöôêÊ字符串>> {
        const { query } = data;
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                ...query,
            },
        });
    }
}
