import { type PathLike, rmSync, writeFileSync } from 'node:fs';
import path from 'node:path';

import type ts from 'typescript';

import { compiler } from '../../compiler';
import {
  type ImportExportItemObject,
  tsNodeToString,
} from '../../compiler/utils';
import { ensureDirSync } from '../utils';
import { ensureUniqueIdentifier, splitNameAndExtension } from './name';
import type { Namespaces } from './types';

export class TypeScriptFile {
  private _headers: Array<string> = [];
  private _imports = new Map<string, Map<string, ImportExportItemObject>>();
  private _items: Array<ts.Node | string> = [];
  private _name: string;
  private _path: PathLike;

  public namespaces: Namespaces = {
    type: {},
    value: {},
  };

  public constructor({
    dir,
    name,
    header = true,
  }: {
    dir: string;
    header?: boolean;
    name: string;
  }) {
    this._name = this._setName(name);
    this._path = path.resolve(dir, this.getName());

    if (header) {
      this._headers = [
        ...this._headers,
        '// This file is auto-generated by @hey-api/openapi-ts',
      ];
    }
  }

  public add(...nodes: Array<ts.Node | string>) {
    this._items = [...this._items, ...nodes];
  }

  public ensureUniqueIdentifier({
    namespace,
    ...args
  }: Omit<Parameters<typeof ensureUniqueIdentifier>[0], 'namespace'> & {
    namespace: keyof Namespaces;
  }) {
    return ensureUniqueIdentifier({
      namespace: this.namespaces[namespace],
      ...args,
    });
  }

  /**
   * Adds an import to the provided module. Handles duplication, returns added import.
   */
  public import({
    module,
    ...importedItem
  }: ImportExportItemObject & {
    module: string;
  }): ImportExportItemObject {
    let moduleMap = this._imports.get(module);

    if (!moduleMap) {
      moduleMap = new Map<string, ImportExportItemObject>();
      this._imports.set(module, moduleMap);
    }

    const match = moduleMap.get(importedItem.name);
    if (match) {
      return match;
    }

    moduleMap.set(importedItem.name, importedItem);
    return importedItem;
  }

  public getName(withExtension = true) {
    if (withExtension) {
      return this._name;
    }

    const { name } = splitNameAndExtension(this._name);
    return name;
  }

  public isEmpty() {
    return !this._items.length;
  }

  public remove(options?: Parameters<typeof rmSync>[1]) {
    rmSync(this._path, options);
  }

  /**
   * Removes last node form the stack. Works as undo.
   */
  public removeNode() {
    this._items = this._items.slice(0, this._items.length - 1);
  }

  private _setName(fileName: string) {
    if (fileName.includes('index')) {
      return fileName;
    }

    const { extension, name } = splitNameAndExtension(fileName);
    return [name, 'gen', extension].filter(Boolean).join('.');
  }

  public toString(separator: string = '\n') {
    let output: string[] = [];
    if (this._headers.length) {
      output = [...output, this._headers.join('\n')];
    }
    let importsStringArray: string[] = [];
    for (const [_module, moduleMap] of this._imports.entries()) {
      const imports = Array.from(moduleMap.values());
      const node = compiler.namedImportDeclarations({
        imports,
        module: _module,
      });
      importsStringArray = [...importsStringArray, tsNodeToString({ node })];
    }
    if (importsStringArray.length) {
      output = [...output, importsStringArray.join('\n')];
    }
    output = [
      ...output,
      ...this._items.map((node) =>
        typeof node === 'string'
          ? node
          : tsNodeToString({ node, unescape: true }),
      ),
    ];
    return output.join(separator);
  }

  public write(separator = '\n') {
    if (this.isEmpty()) {
      this.remove({ force: true });
      return;
    }

    let dir = this._path;
    if (typeof this._path === 'string') {
      const parts = this._path.split(path.sep);
      dir = parts.slice(0, parts.length - 1).join(path.sep);
    }
    ensureDirSync(dir);
    writeFileSync(this._path, this.toString(separator));
  }
}
